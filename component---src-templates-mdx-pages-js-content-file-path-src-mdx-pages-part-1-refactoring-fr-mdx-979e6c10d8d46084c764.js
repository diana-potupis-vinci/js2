"use strict";(self.webpackChunkmyjscourse=self.webpackChunkmyjscourse||[]).push([[3745],{8294:function(e,n,t){t.r(n),t.d(n,{default:function(){return V}});var l=t(3905),r=t(7294);function a(e){const n=Object.assign({h1:"h1",p:"p",a:"a",br:"br",ul:"ul",li:"li",strong:"strong",ol:"ol",code:"code",pre:"pre",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,l.ah)(),e.components),{InternalPageMenu:t,PathViewer:a,PathViewerItem:s,InternalPageMenuItem:u,YoutubeImage:i,InternalPageTitle:c,ScrollableImage:d}=n;return t||o("InternalPageMenu",!0),u||o("InternalPageMenuItem",!0),c||o("InternalPageTitle",!0),a||o("PathViewer",!0),s||o("PathViewerItem",!0),d||o("ScrollableImage",!0),i||o("YoutubeImage",!0),r.createElement(r.Fragment,null,r.createElement(n.h1,null,"d) Refactoring √† l'aide d'un \"fat model\""),"\n",r.createElement(t,null,r.createElement(a,null,r.createElement(s,{to:"/"}," web2course "),r.createElement(s,{to:"/part1"}," Partie 1)"),r.createElement(s,{selected:!0}," d) Refactoring ")),r.createElement(u,null," Architectures web possibles pour une API ? "),r.createElement(u,null,' Architecture Express & "fat model" '),r.createElement(u,null," Exercice 1.9 : Refactoring √† l'aide d'un fat model "),r.createElement(u,null," Exercice 1.10 : Encore un fat model ")),"\n",r.createElement("div",{className:"card card__simple-youtube-container"},r.createElement(i,{src:"https://youtu.be/FihV6wXpIQE"})),"\n",r.createElement(n.h1,null,r.createElement(c,null," Architectures web possibles pour une API ? ")),"\n",r.createElement(n.p,null,"Si nous reprenons le code actuel du tutoriel de l'API g√©rant des pizzas (",r.createElement(n.a,{href:"https://github.com/e-vinci/js-demos/tree/main/backend-restful-api/restful-api-essentials/persistence"},"api-persistence"),"), nous pouvons d√©tecter que celui-ci pourrait √™tre plus propre."),"\n",r.createElement(n.p,null,"Par exemple, le routeur de \"pizzas\" s'occupe tant de g√©rer les requ√™tes des clients que d'acc√©der directement aux donn√©es.",r.createElement(n.br),"\n","G√©n√©ralement, nous pr√©f√©rons s√©parer le code g√©rant les acc√®s aux donn√©es du code g√©rant la pr√©sentation du r√©sultat des op√©rations."),"\n",r.createElement(n.p,null,"On peut donc se demander comment s√©parer le code traitant de sujets tr√®s diff√©rents. Il existe une multitude d'architectures possibles, voici par exemple certains des plus grands noms :"),"\n",r.createElement(n.ul,null,"\n",r.createElement(n.li,null,r.createElement(n.strong,null,"Architecture MVC (Model View Controller)")," ; au niveau backend, ce genre d'architecture est g√©n√©ralement tr√®s utile quand on fait des MPA (ou Multi-Page Applications) via du Server-Side Rendering. Les ",r.createElement(n.strong,null,"Views")," permettent de g√©n√©rer le frontend √† l'aide d'un moteur de templating ; le ",r.createElement(n.strong,null,"Controller")," s'occupe de traiter les requ√™tes en appelant le ",r.createElement(n.strong,null,"Model")," pour l'acc√®s aux op√©rations sur les donn√©es et en renvoyant les ",r.createElement(n.strong,null,"Views")," ad√©quates. Pour une API, cette architecture n'est pas la plus adapt√©e."),"\n",r.createElement(n.li,null,r.createElement(n.strong,null,'Architecture classique "three-tier"')," ; au nivau backend, quand on d√©veloppe une architecture trois tiers, cela signifie que l'on d√©coupe notre API en trois couches :","\n",r.createElement(n.ul,null,"\n",r.createElement(n.li,null,r.createElement(n.strong,null,"couche de pr√©sentation")," : cette couche est responsable de pr√©senter les ressources aux clients et d'interpr√©ter les repr√©sentations des ressources donn√©es dans les requ√™tes ;"),"\n",r.createElement(n.li,null,r.createElement(n.strong,null,"couche business")," : cette couche s'occupe de toute la logique de l'API, elle fait l'interm√©diaire entre la couche de pr√©sentation et la couche de donn√©es ;"),"\n",r.createElement(n.li,null,r.createElement(n.strong,null,"couche de donn√©es")," : cette couche s'occupe des acc√®s aux donn√©es et permet notamment la persistance des ressources au sein de bases de donn√©es.",r.createElement(n.br),"\n","Le mod√®le trois tiers est fort int√©ressant, mais il demande un peu trop d'√©criture de codes sans grande valeur ajout√©e quand nous utilisons le framework Express."),"\n"),"\n"),"\n",r.createElement(n.li,null,"..."),"\n"),"\n",r.createElement(n.p,null,"Finalement, parmi les architectures classiques, il n'y a pas r√©ellement une architecture qui colle parfaitement √† ce qui est offert par le framework Express, sans devoir √©crire du code sans valeur ajout√©e."),"\n",r.createElement(n.p,null,'Ainsi, nous allons simplement cr√©er notre propre architecture "maison", sur base de ces points :'),"\n",r.createElement(n.ul,null,"\n",r.createElement(n.li,null,"On souhaite pouvoir ",r.createElement(n.strong,null,"facilement remplacer la couche d'acc√®s aux donn√©es sans changer la repr√©sentation des ressources")," ; en effet, dans un premier temps, nous sauvegarderons des donn√©es dans des fichiers JSON. Plus tard, si l'on venait √† sauvegarder les donn√©es dans un syst√®me de gestion de base de donn√©es, on ne veut pas devoir mettre √† jour le code prenant en compte les requ√™tes des clients et pr√©sentant la r√©ponse √† ces requ√™tes ; en gros, on souhaite que le code de nos routers, au sein d'Express, soit ind√©pendant de l'impl√©mentation des acc√®s aux donn√©es."),"\n",r.createElement(n.li,null,"Nous n'avons pas vraiment de contraintes pour l'aspect \"business\" de nos APIs : la logique de l'application peut soit s'associer √† la couche de donn√©es, soit √† la couche pr√©sentation. N√©anmoins, nous allons pr√©f√©rer ",r.createElement(n.strong,null,"associer un maximum de la logique de notre application")," √† ce que nous allons appeler un ",r.createElement(n.strong,null,"fat model"),". Le ",r.createElement(n.strong,null,"fat model")," contiendra toutes les ",r.createElement(n.strong,null,"op√©rations possibles sur les ressources"),", ainsi que les ",r.createElement(n.strong,null,"acc√®s aux donn√©es"),"."),"\n",r.createElement(n.li,null,"Le ",r.createElement(n.strong,null,"fat model")," peut √™tre soit √©crit en orient√© objet, soit simplement √™tre un module fournissant des fonctions. Dans le cadre de ce cours, nous choisissons de pr√©senter un maximum de programmation fonctionnelle plut√¥t que de l'orient√© objet.",r.createElement(n.br),"\n","N√©anmoins, n'h√©sitez pas √† √©crire des classes si cela vous tient √† coeur üòâ."),"\n"),"\n",r.createElement(n.h1,null,r.createElement(c,null,' Architecture Express & "fat model" ')),"\n",r.createElement(n.p,null,"Voici l'architecture que nous allons appliquer dans nos prochaines API :"),"\n",r.createElement(d,{name:"architecture.png",minWidth:"859px",maxWidth:"859px"}),"\n",r.createElement("figcaption",null,"Architecture recommand√©e pour ce cours"),"\n",r.createElement(n.p,null,"Voici quelques explications sur ce diagramme que nous allons appliquer dans le prochain tutoriel :"),"\n",r.createElement(n.ol,null,"\n",r.createElement(n.li,null,"Un client fait la requ√™te √† l'API demandant de lire toutes les pizzas."),"\n",r.createElement(n.li,null,'Le router de "pizzas" prend le r√¥le de "Controller". Il s\'occupe de traiter de la requ√™te et d\'appeler une op√©ration du ',r.createElement(n.strong,null,"fat model")," pour acc√©der aux ressources."),"\n",r.createElement(n.li,null,"Le ",r.createElement(n.strong,null,"fat model")," s'occupe d'acc√©der aux donn√©es, qui se trouvent au sein d'un fichier JSON, et de les lire."),"\n",r.createElement(n.li,null,"Le ",r.createElement(n.strong,null,"fat model"),' retourne des donn√©es sous forme d\'un objet JS au router de "pizzas".'),"\n",r.createElement(n.li,null,'Le router de "pizzas" renvoient une repr√©sentation JSON de l\'objet JS, un array de pizzas, au client.'),"\n"),"\n",r.createElement(n.p,null,'Dans un nouveau tutoriel, nous allons maintenant faire un refactor de notre API de gestion des pizzas en cr√©ant et utilisant un "fat model".'),"\n",r.createElement(n.p,null,"Au sein de votre repo ",r.createElement(n.strong,null,r.createElement(n.code,null,"web2")),", √† l'aide du boilerplate du cours ",r.createElement(n.a,{href:"https://github.com/e-vinci/basic-api-boilerplate"},"basic-api-boilerplate"),", veuillez cr√©er le projet nomm√© ",r.createElement(n.strong,null,r.createElement(n.code,null,"/web2/tutorials/pizzeria/api/fat-model")),"."),"\n",r.createElement(n.p,null,"Si vous ne voyez pas comment utiliser le boilerplate, tout est expliqu√© dans le ",r.createElement(n.strong,null,r.createElement(n.code,null,"README"))," associ√© au repository du boilerplate. N'h√©sitez pas √† le (re)lire ; )"),"\n",r.createElement(n.p,null,"Pour la suite du tutoriel, nous consid√©rons que tous les chemins absolus d√©marrent du r√©pertoire ",r.createElement(n.strong,null,r.createElement(n.code,null,"/web2/tutorials/pizzeria/api/fat-model")),"."),"\n",r.createElement(n.p,null,"Nous allons commencer par cr√©er le ",r.createElement(n.strong,null,"fat model")," offrant les op√©rations sur les pizzas.",r.createElement(n.br),"\n","Veuillez cr√©er le fichier ",r.createElement(n.strong,null,r.createElement(n.code,null,"/models/pizzas.js")),".",r.createElement(n.br),"\n",'Au sein de ce fichier, veuillez ajouter le code s\'occupant des op√©rations sur les ressources de type "pizzas" :'),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-js"},"const path = require('node:path');\nconst { parse, serialize } = require('../utils/json');\n\nconst jsonDbPath = path.join(__dirname, '/../data/pizzas.json');\n\nconst defaultPizzas = [\n  {\n    id: 1,\n    title: '4 fromages',\n    content: 'Gruy√®re, S√©rac, Appenzel, Gorgonzola, Tomates',\n  },\n  {\n    id: 2,\n    title: 'Vegan',\n    content: 'Tomates, Courgettes, Oignons, Aubergines, Poivrons',\n  },\n  {\n    id: 3,\n    title: 'Vegetarian',\n    content: 'Mozarella, Tomates, Oignons, Poivrons, Champignons, Olives',\n  },\n  {\n    id: 4,\n    title: 'Alpage',\n    content: 'Gruy√®re, Mozarella, Lardons, Tomates',\n  },\n  {\n    id: 5,\n    title: 'Diable',\n    content: 'Tomates, Mozarella, Chorizo piquant, Jalapenos',\n  },\n];\n\nfunction readAllPizzas(orderBy) {\n  const orderByTitle = orderBy?.includes('title') ? orderBy : undefined;\n  let orderedMenu;\n  const pizzas = parse(jsonDbPath, defaultPizzas);\n  if (orderByTitle)\n    orderedMenu = [...pizzas].sort((a, b) => a.title.localeCompare(b.title));\n  if (orderByTitle === '-title') orderedMenu = orderedMenu.reverse();\n\n  const allPizzasPotentiallyOrderd = orderedMenu ?? pizzas;\n  return allPizzasPotentiallyOrderd;\n}\n\nfunction readOnePizza(id) {\n  const idNumber = parseInt(id, 10);\n  const pizzas = parse(jsonDbPath, defaultPizzas);\n  const indexOfPizzaFound = pizzas.findIndex((pizza) => pizza.id === idNumber);\n  if (indexOfPizzaFound < 0) return undefined;\n\n  return pizzas[indexOfPizzaFound];\n}\n\nfunction createOnePizza(title, content) {\n  const pizzas = parse(jsonDbPath, defaultPizzas);\n\n  const createdPizza = {\n    id: getNextId(),\n    title,\n    content,\n  };\n\n  pizzas.push(createdPizza);\n\n  serialize(jsonDbPath, pizzas);\n\n  return createdPizza;\n}\n\nfunction getNextId() {\n  const pizzas = parse(jsonDbPath, defaultPizzas);\n  const lastItemIndex = pizzas?.length !== 0 ? pizzas.length - 1 : undefined;\n  if (lastItemIndex === undefined) return 1;\n  const lastId = pizzas[lastItemIndex]?.id;\n  const nextId = lastId + 1;\n  return nextId;\n}\n\nfunction deleteOnePizza(id) {\n  const idNumber = parseInt(id, 10);\n  const pizzas = parse(jsonDbPath, defaultPizzas);\n  const foundIndex = pizzas.findIndex((pizza) => pizza.id === idNumber);\n  if (foundIndex < 0) return undefined;\n  const deletedPizzas = pizzas.splice(foundIndex, 1);\n  const deletedPizza = deletedPizzas[0];\n  serialize(jsonDbPath, pizzas);\n\n  return deletedPizza;\n}\n\nfunction updateOnePizza(id, propertiesToUpdate) {\n  const idNumber = parseInt(id, 10);\n  const pizzas = parse(jsonDbPath, defaultPizzas);\n  const foundIndex = pizzas.findIndex((pizza) => pizza.id === idNumber);\n  if (foundIndex < 0) return undefined;\n\n  const updatedPizza = { ...pizzas[foundIndex], ...propertiesToUpdate };\n\n  pizzas[foundIndex] = updatedPizza;\n\n  serialize(jsonDbPath, pizzas);\n\n  return updatedPizza;\n}\n\nmodule.exports = {\n  readAllPizzas,\n  readOnePizza,\n  createOnePizza,\n  deleteOnePizza,\n  updateOnePizza,\n};\n")),"\n",r.createElement(n.p,null,"Maintenant, il ne reste plus qu'√† mettre √† jour le router ",r.createElement(n.strong,null,r.createElement(n.code,null,"/routes/pizzas.js"))," afin de faire les appels aux fonctions offertes par le mod√®le :"),"\n",r.createElement(n.pre,{numbered:!0,highlighting:"1-8,17,24,39,46,62"},r.createElement(n.code,{className:"language-js"},"const express = require('express');\nconst {\n  readAllPizzas,\n  readOnePizza,\n  createOnePizza,\n  deleteOnePizza,\n  updateOnePizza,\n} = require('../models/pizzas');\n\nconst router = express.Router();\n\n/* Read all the pizzas from the menu\n   GET /pizzas?order=title : ascending order by title\n   GET /pizzas?order=-title : descending order by title\n*/\nrouter.get('/', (req, res) => {\n  const allPizzasPotentiallyOrdered = readAllPizzas(req?.query?.order);\n\n  return res.json(allPizzasPotentiallyOrdered);\n});\n\n// Read the pizza identified by an id in the menu\nrouter.get('/:id', (req, res) => {\n  const foundPizza = readOnePizza(req.params.id);\n\n  if (!foundPizza) return res.sendStatus(404);\n\n  return res.json(foundPizza);\n});\n\n// Create a pizza to be added to the menu.\nrouter.post('/', (req, res) => {\n  const title = req?.body?.title?.length !== 0 ? req.body.title : undefined;\n  const content =\n    req?.body?.content?.length !== 0 ? req.body.content : undefined;\n\n  if (!title || !content) return res.sendStatus(400); // error code '400 Bad request'\n\n  const createdPizza = createOnePizza(title, content);\n\n  return res.json(createdPizza);\n});\n\n// Delete a pizza from the menu based on its id\nrouter.delete('/:id', (req, res) => {\n  const deletedPizza = deleteOnePizza(req.params.id);\n\n  if (!deletedPizza) return res.sendStatus(404);\n\n  return res.json(deletedPizza);\n});\n\n// Update a pizza based on its id and new values for its parameters\nrouter.patch('/:id', (req, res) => {\n  const title = req?.body?.title;\n  const content = req?.body?.content;\n\n  if ((!title && !content) || title?.length === 0 || content?.length === 0) {\n    return res.sendStatus(400);\n  }\n\n  const updatedPizza = updateOnePizza(req.params.id, { title, content });\n\n  if (!updatedPizza) return res.sendStatus(404);\n\n  return res.json(updatedPizza);\n});\n\nmodule.exports = router;\n")),"\n",r.createElement(n.p,null,"Lancer votre API soit via le debugger, soit via la commande ",r.createElement(n.strong,null,r.createElement(n.code,null,"npm run dev")),".",r.createElement(n.br),"\n","Veuillez ensuite tester que tout fonctionne bien en ex√©cutant les requ√™tes HTTP d√©j√† pr√©sentes dans le r√©pertoire ",r.createElement(n.strong,null,r.createElement(n.code,null,"REST Client"))," du boilerplate."),"\n",r.createElement(n.p,null,"Si tout fonctionne bien, faites un ",r.createElement(n.strong,null,r.createElement(n.code,null,"commit"))," de votre repo (",r.createElement(n.strong,null,r.createElement(n.code,null,"web2")),") avec comme message : ",r.createElement(n.strong,null,r.createElement(n.code,null,"api-fat-model tutorial")),"."),"\n",r.createElement(n.p,null,"En cas de souci, vous pouvez acc√©der au code du tutoriel ici :\n",r.createElement(n.a,{href:"https://github.com/e-vinci/js-demos/tree/main/backend-restful-api/restful-api-essentials/fat-model"},"api-fat-model"),"."),"\n",r.createElement(n.h1,null,r.createElement(c,null," Exercice 1.9 : Refactoring √† l'aide d'un fat model ")),"\n",r.createElement(n.p,null,"Vous allez faire un nouveau refactor de la RESTful API de ",r.createElement(n.strong,null,"myMovies"),", afin de restructurer l'application selon l'architecture recommand√©e, en utilisant un \"fat model\" pour g√©rer les op√©rations sur les films."),"\n",r.createElement(n.p,null,"Veuillez repartir du code de la solution de votre ",r.createElement(n.a,{href:"../tools/#exercice_1_8_refactoring_a_laide_de_linter_formatter"},"Exercice 1.8"),".",r.createElement(n.br),"\n","Le code de votre application doit se trouver dans votre repository local et votre web repository (normalement appel√© ",r.createElement(n.strong,null,r.createElement(n.code,null,"web2")),") dans le r√©pertoire nomm√© ",r.createElement(n.strong,null,r.createElement(n.code,null,"/exercises/1.9")),"."),"\n",r.createElement(n.p,null,"Veuillez faire un refactor de votre API g√©rant les films afin que tout ce qui traite des op√©rations sur les ressources soit fait au sein du mod√®le ",r.createElement(n.strong,null,r.createElement(n.code,null,"/models/films.js")),"."),"\n",r.createElement(n.p,null,"Veuillez tester que votre API fonctionne toujours aussi bien apr√®s le refactoring."),"\n",r.createElement(n.p,null,"Veuillez faire un ",r.createElement(n.strong,null,r.createElement(n.code,null,"commit"))," de votre code avec le message suivant : ",r.createElement(n.strong,null,r.createElement(n.code,null,"1.9 : API : fat model")),"."),"\n",r.createElement(n.h1,null,r.createElement(c,null," Exercice 1.10 : Encore un fat model ")),"\n",r.createElement(n.p,null,"Vous allez cr√©er une nouvelle API mettant √† disposition des op√©rations CRUD (",r.createElement(n.strong,null,"C"),"reate, ",r.createElement(n.strong,null,"R"),"ead, ",r.createElement(n.strong,null,"U"),"pdate & ",r.createElement(n.strong,null,"D"),'elete) sur des ressources de type "texte √† dactylographier".'),"\n",r.createElement(n.p,null,'Vous devez appliquer les outils de d√©veloppement et l\'architecture recommand√©e dans ce cours-ci en mettant en place un "fat model".'),"\n",r.createElement(n.p,null,"Pour ce faire, veuillez cr√©er un nouveau projet dans votre repository local et votre web repository (normalement appel√© ",r.createElement(n.strong,null,r.createElement(n.code,null,"web2")),") nomm√© ",r.createElement(n.strong,null,r.createElement(n.code,null,"/exercises/1.10"))," sur base du boilerplate : ",r.createElement(n.a,{href:"https://github.com/e-vinci/basic-api-boilerplate"},"basic-api-boilerplate"),"."),"\n",r.createElement(n.p,null,"‚ö° Si vous avez fait un clone du boilerplate, attention au Git dans le Git, n'oubliez pas de supprimer le dossier ",r.createElement(n.strong,null,r.createElement(n.code,null,".git"))," pr√©sent dans votre nouveau projet."),"\n",r.createElement(n.p,null,"Un texte √† dactylographier contient comme propri√©t√©s :"),"\n",r.createElement(n.ul,null,"\n",r.createElement(n.li,null,r.createElement(n.strong,null,r.createElement(n.code,null,"id"))," : un uuid g√©n√©r√© via la librairie ",r.createElement(n.a,{href:"https://www.npmjs.com/package/uuid"},"https://www.npmjs.com/package/uuid")," ;"),"\n",r.createElement(n.li,null,r.createElement(n.strong,null,r.createElement(n.code,null,"content"))," : un contenu textuel ;"),"\n",r.createElement(n.li,null,r.createElement(n.strong,null,r.createElement(n.code,null,"level"))," : le niveau associ√© au texte; les seules valeurs autoris√©es sont : ",r.createElement(n.strong,null,"easy"),", ",r.createElement(n.strong,null,"medium")," et ",r.createElement(n.strong,null,"hard"),"."),"\n"),"\n",r.createElement(n.p,null,"Voici le tableau formalisant toutes les op√©rations que vous devez impl√©menter :"),"\n",r.createElement(n.table,null,r.createElement(n.thead,null,r.createElement(n.tr,null,r.createElement(n.th,null,"URI"),r.createElement(n.th,null,"M√©thode"),r.createElement(n.th,null,"M√©thode"))),r.createElement(n.tbody,null,r.createElement(n.tr,null,r.createElement(n.td,null,r.createElement(n.strong,null,r.createElement(n.code,null,"texts"))),r.createElement(n.td,null,"GET"),r.createElement(n.td,null,"READ ALL : Lire toutes les ressources de la collection")),r.createElement(n.tr,null,r.createElement(n.td,null,r.createElement(n.strong,null,r.createElement(n.code,null,"texts?level=value"))),r.createElement(n.td,null,"GET"),r.createElement(n.td,null,"READ ALL FILTERED : Lire toutes les ressources de la collection selon le filtre donn√©")),r.createElement(n.tr,null,r.createElement(n.td,null,r.createElement(n.strong,null,r.createElement(n.code,null,"texts/:id"))),r.createElement(n.td,null,"GET"),r.createElement(n.td,null,"READ ONE : Lire la ressource identifi√©e")),r.createElement(n.tr,null,r.createElement(n.td,null,r.createElement(n.strong,null,r.createElement(n.code,null,"texts"))),r.createElement(n.td,null,"POST"),r.createElement(n.td,null,"CREATE ONE : Cr√©er une ressource bas√©e sur les donn√©es de la requ√™te")),r.createElement(n.tr,null,r.createElement(n.td,null,r.createElement(n.strong,null,r.createElement(n.code,null,"texts/:id"))),r.createElement(n.td,null,"DELETE"),r.createElement(n.td,null,"DELETE ONE : Effacer la ressource identifi√©e")),r.createElement(n.tr,null,r.createElement(n.td,null,r.createElement(n.strong,null,r.createElement(n.code,null,"texts/:id"))),r.createElement(n.td,null,"PUT"),r.createElement(n.td,null,"UPDATE ONE : Remplacer l'enti√®ret√© de la ressource par les donn√©es de la requ√™te")))),"\n",r.createElement("br"),"\n",r.createElement(n.p,null,"Veuillez bien valider les valeurs des param√®tres. Notament, une ",r.createElement(n.strong,null,r.createElement(n.code,null,"level"))," doit √™tre compris dans les valeurs autoris√©es, sinon un code d'erreur appropri√© doit √™tre renvoy√©."),"\n",r.createElement(n.p,null,"Veuillez tester toutes les m√©thodes offertes par votre application √† l'aide du client HTTP\nde REST Client."),"\n",r.createElement(n.p,null,"Veuillez faire un ",r.createElement(n.strong,null,r.createElement(n.code,null,"commit"))," de votre code avec le message suivant : ",r.createElement(n.strong,null,r.createElement(n.code,null,"1.10 : API : CRUD texts & fat model")),"."))}var s=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?r.createElement(n,e,r.createElement(a,e)):a(e)};function o(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}var u=t(4160),i=t(5583),c=t(5679),d=t(307),m=t(7410),p=t(9523),E=t(8075),z=t(9063),f=t(1631),g=t(5772),h=t(2770),b=t(7008),P=t(9771),v=t(1218),x=(t(5258),t(9394)),I=t(4579),q=t(7743),y=t(9256),j=t(6488),A=t(5175),O=t(6387),w=t(6044);const T={Link:u.Link,Image:c.Z,Section:d.Z,Content:m.Z,Background:p.Z,SectionHeader:E.Z,SectionFooter:z.Z,PageHeader:f.Z,CodeBlock:h.Z,LinkFile:b.Z,ScrollableImage:P.Z,PublicProjectsView:v.Z,AuthenticatedBlock:x.Z,UnAuthenticatedBlock:I.Z,NestedMdxBlock:q.Z,YoutubeImage:y.Z,InternalPageMenu:j.Z,InternalPageMenuItem:A.Z,InternalPageTitle:O.Z,PathViewer:w.k,PathViewerItem:w.F};function S(e){var n,t,a,s,o;let{data:{mdx:u,allImages:c},children:d}=e;return T.PageHeader=(0,g.u)(f.Z,null==u?void 0:u.frontmatter),r.createElement(i.Z,Object.assign({},null!=u&&u.frontmatter?{frontmatter:u.frontmatter}:{},null!=u&&null!==(n=u.frontmatter)&&void 0!==n&&n.navbarExtraStyles?{navbarExtraStyles:u.frontmatter.navbarExtraStyles}:{},null!=u&&null!==(t=u.frontmatter)&&void 0!==t&&t.headerImage?{headerImage:u.frontmatter.headerImage}:{},null!=u&&null!==(a=u.frontmatter)&&void 0!==a&&a.featuredImage?{featuredImage:u.frontmatter.featuredImage}:{},null!=u&&null!==(s=u.frontmatter)&&void 0!==s&&s.title?{pageTitle:u.frontmatter.title}:{},c&&c.length>0?{allImages:c}:{}),r.createElement(l.Zo,{components:T},r.createElement("div",{className:null!=u&&null!==(o=u.frontmatter)&&void 0!==o&&o.autoMargin?"page page--auto-margin ":"page"},d)))}function V(e){return r.createElement(S,e,r.createElement(s,e))}}}]);
//# sourceMappingURL=component---src-templates-mdx-pages-js-content-file-path-src-mdx-pages-part-1-refactoring-fr-mdx-979e6c10d8d46084c764.js.map