{"componentChunkName":"component---src-templates-mdx-pages-js-content-file-path-src-mdx-pages-modules-8-fr-mdx","path":"/modules/8/","result":{"data":{"mdx":{"id":"098abeb6-736b-5a9e-b77d-0bacf3df6c97","body":"\r\n# Module 8 : SPA & sessions & d√©ploiement\r\nCe module vous offre principalement la gestion de session utilisateurs pour faciliter les op√©rations sur des ressources ainsi que le d√©ploiement de SPA sur le cloud.\r\n\r\nVoici les sujets trait√©s :\r\n- a) [Gestion de sessions c√¥t√© client](#a)\r\n    - a.1) [Introduction](#a1)\r\n    - a.2) [Persistance de donn√©es de session via le web storage](#a2)\r\n    - a.3) [Persistance de donn√©es de session via des cookies](#a3)\r\n- b) [Exercice 8.1 : Persistance de la session de myMovies dans le web storage](#b)\r\n- c) [D√©ploiement d'applications sur le cloud](#d)\r\n    - c.1) [Introduction](#c1)\r\n    - c.2) [D√©ploiement d'un frontend sur GitHub Pages](#c2)\r\n    - c.3) [D√©ploiement d'une API sur Heroku](#c3)\r\n    - c.4) [D√©ploiement d'une API sur Azure](#c4)\r\n    - c.5) [D√©ploiement d'une API sur d'autres providers gratuits](#c5)\r\n    - c.6) [D√©ploiement d'une base de donn√©es](#c6)\r\n- d) [Exercice 8.2 : D√©ploiement de myMovies sur le cloud](#d)\r\n- e) [üç¨ Exercice 8.3 : l'essentiel du cours en action](#e)\r\n\r\n# <a id=\"a\"></a> a) Gestion de sessions c√¥t√© client\r\n\r\n## <a id=\"a1\"></a> a.1) Introduction\r\nNous avons vu qu'une des exigences associ√©es √† la cr√©ation d'une application selon l'architecture REST, c'est qu'elle soit **stateless**, c'est √† dire que l'API ne peut pas garder l'√©tat du client, sa session, c√¥t√© serveur.\r\n\r\nC'est donc au client de sauvegarder ses donn√©es de session.\r\n\r\nPour rappel, nous avons d√©j√† vu les avantages et les inconv√©nients d'avoir un serveur **stateless** par rapport √† un serveur **stateful** lorsque nous avons trait√© de l'authentification : [Module 7 : a.1.4) Stateful VS stateless authentication](/modules/7/#a1.4).\r\n\r\nMais o√π pouvons nous sauvegarder des donn√©es de mani√®re persistante c√¥t√© client ?\r\n\r\nIl existe deux  fa√ßons principales de sauvegarder de l'info dans un browser :\r\n- le **web storage** ; \r\n- les **cookies**.\r\n\r\nDans le cadre de ce cours, nous allons voir comment sauvegarder de l'info √† l'aide de ces deux fa√ßons.\r\n\r\nNB : le browser met √† disposition d'autres API un peu moins connues pour sauvegarder des infos. Nous ne les verrons pas dans le cadre de ce cours, mais il reste n√©anmoins int√©ressant de lire rapidement de quoi il s'agit :\r\n- **IndexedDB API** : permet de sauvegarder c√¥t√© client de grandes quantit√©s d'infos structur√©es, incluant des fichiers ; c'est une base de donn√©es orient√©e objets en JS qui permet les transactions.\r\n- **Cache API** : permet d'enregistrer et retrouver des requ√™tes et leur r√©ponses. Bien qu'√† la base cr√©√© pour pouvoir fournir des r√©ponses plus rapides √† certaines requ√™tes, cette API peut aussi √™tre utilis√©e comme m√©canisme g√©n√©ral de stockage.\r\n\r\n## <a id=\"a2\"></a> a.2) Persistance de donn√©es de session via le web storage\r\n### a.2.1) Introduction\r\nLe **Web Storage API** fournit un m√©canisme permettant aux browser d'enregistrer des paires **cl√© / valeur** d'une mani√®re plus intuitive que l'utilisation de cookies.\r\n\r\nIl existe deux m√©canismes au sein du web storage :\r\n- **sessionStorage** :\r\n    - il offre un espace de stockage s√©par√© pour chaque origine pour la dur√©e de la session d'une page, tant que le browser est ouvert.\r\n    - les cl√©s / valeurs y sont enregistr√©es sous forme de string uniquement ;\r\n    - il met √† disposition un espace de stockage plus grand qu'un cookie, ~5MB maximum par origine ;\r\n- **localStorage** : \r\n    - offre aussi un espace de stockage s√©par√© pour chaque origine, mais les donn√©es persistent quand le browser est ferm√© et r√©ouvert ;\r\n    - espace de stockage plus grand qu'un cookie, limit√© √† ~10MB en cas de crash/restart du browser.\r\n\r\nLes principales m√©thodes offertes par **sessionStorage** et **localStorage** sont les m√™mes. Voici quelques exemples de codes par m√©thode.\r\n\r\n### a.2.2) setItem()\r\nCette m√©thode permet d'enregistrer, pour une cl√© donn√©e, la valeur associ√©e :\r\n\r\n```js numbered {5}\r\nconst¬†STORE_NAME¬†=¬†'user';\r\n\r\nconst¬†setUserSessionData¬†=¬†(user)¬†=>¬†{\r\n¬†¬†const¬†storageValue¬†=¬†JSON.stringify(user);\r\n¬†¬†localStorage.setItem(STORE_NAME,¬†storageValue);\r\n};\r\n```\r\n\r\nComme le web storage est un syst√®me de paires de cl√©-valeur qui enregistre les donn√©es sous forme de string, cela vous rappelle p-e qu'il est possible d'enregistrer des objets. \r\n\r\nüí≠ Comment enregistrer un objet JS sous forme de string ?  \r\nH√© bien il suffit de le s√©rialiser, comme cela est fait dans l'exemple √† l'aide de la m√©thode **`JSON.stringify()`**.\r\n\r\n### a.2.3) getItem()\r\nCette m√©thode permet d'obtenir la valeur associ√©e √† la cl√© donn√©e en argument :\r\n\r\n```js numbered {4}\r\nconst¬†STORE_NAME¬†=¬†'user';\r\n\r\nconst¬†getUserSessionData¬†=¬†()¬†=>¬†{\r\n¬†¬†const¬†retrievedUser¬†=¬†localStorage.getItem(STORE_NAME);\r\n¬†¬†if¬†(!retrievedUser)¬†return;\r\n¬†¬†return¬†JSON.parse(retrievedUser);\r\n};\r\n```\r\n\r\nPour cet exemple, comme la valeur a √©t√© s√©rialis√©e, nous pouvons r√©cup√©rer l'objet gr√¢ce √† la m√©thode **`JSON.parse()`**.\r\n\r\n### a.2.4) removeITem()\r\nCette m√©thode permet d'effacer une cl√© / valeur :\r\n\r\n```js numbered {4}\r\nconst¬†STORE_NAME¬†=¬†'user';\r\n\r\nconst¬†removeSessionData¬†=¬†()¬†=>¬†{\r\n¬†¬†localStorage.removeItem(STORE_NAME);\r\n};\r\n```\r\n\r\n### a.2.5) clear()\r\nCette m√©thode permet d'effacer tout l'espace de stockage pour une origine donn√©e.\r\n\r\nCette m√©thode est tr√®s utile lorsque l'on souhaite effacer toute la session d'un utilisateur, notamment lors du logout d'un utilisateur.\r\n\r\n### a.2.6) Mise en place du localStorage pour sauvegarder les donn√©es de session\r\n\r\nDans le cadre du site nous permettant de g√©rer une pizzeria, nous allons faire en sorte de sauvegarder les donn√©es de session au sein du **localStorage**, et plus juste en m√©moire vive.\r\n\r\nVeuillez d√©marrer la derni√®re version de la RESTful API de la pizzeria. En cas de souci, vous pouvez utiliser ce code-ci :\r\n[safe](https://github.com/e-vinci/js-demos/tree/main/backend-restful-api/restful-api-essentials/safe).\r\n\r\nNous allons maintenant finaliser le d√©veloppement de l'IHM [jwt-fetch](https://github.com/e-vinci/js-demos/tree/main/frontend/frontend-essentials/jwt-fetch).\r\n\r\nAu sein de votre repo **web2**, veuillez cr√©er le projet nomm√© **/web2/tutorials/pizzeria/hmi/web-storage** sur base d'un copier-coller de **/web2/tutorials/pizzeria/hmi/jwt-fetch** (ou [jwt-fetch](https://github.com/e-vinci/js-demos/tree/main/frontend/frontend-essentials/jwt-fetch)).\r\n\r\nPour la suite du tutoriel, nous consid√©rons que tous les chemins absolus d√©marrent du r√©pertoire\r\n**/web2/tutorials/pizzeria/hmi/web-storage**.\r\n\r\nAfin de sauvegarder les donn√©es de session, c'est √† dire l'objet **authenticatedUser** contenant un token et un username, nous devons juste mettre √† jour le fichier **/usr/utils/auths.js** :\r\n\r\n```js numbered {1,7,10,15-16,24}\r\nconst STORE_NAME = 'user';\r\nlet currentUser;\r\n\r\nconst getAuthenticatedUser = () => {\r\n  if (currentUser !== undefined) return currentUser;\r\n\r\n  const serializedUser = localStorage.getItem(STORE_NAME);\r\n  if (!serializedUser) return undefined;\r\n\r\n  currentUser = JSON.parse(serializedUser);\r\n  return currentUser;\r\n};\r\n\r\nconst setAuthenticatedUser = (authenticatedUser) => {\r\n  const serializedUser = JSON.stringify(authenticatedUser);\r\n  localStorage.setItem(STORE_NAME, serializedUser);\r\n\r\n  currentUser = authenticatedUser;\r\n};\r\n\r\nconst isAuthenticated = () => currentUser !== undefined;\r\n\r\nconst clearAuthenticatedUser = () => {\r\n  localStorage.removeItem(STORE_NAME);\r\n  currentUser = undefined;\r\n};\r\n\r\n// eslint-disable-next-line object-curly-newline\r\nexport { getAuthenticatedUser, setAuthenticatedUser, isAuthenticated, clearAuthenticatedUser };\r\n```\r\n\r\nAu sein de **`getAuthenticatedUser`** : \r\n- on fait un premier check afin d'√©viter d'aller lire dans le **localStorage** si la variable **currentUser** est d√©j√† initialis√©e.\r\n- on parse l'utilisateur authentifi√© et s√©rialis√© qui est retrouv√© dans le **localStorage** via la cl√© **STORE_NAME**.\r\n\r\nAu sein de **`setAuthenticatedUser`**, on s√©rialise **authenticatedUser** avant d'ajouter une paire cl√© / valeur au **localStorage**.  Ces donn√©es restent dans le browser, peu importe le nombre de fois que l'on ferme son browser. \r\n\r\nDans **`clearAuthenticatedUser`**, on efface la cl√© / valeur associ√©e √† l'utilisateur authentifi√© (via la cl√© **STORE_NAME**).\r\n\r\nVeuillez bien mettre √† jour votre code et tester l'application.  \r\nConnectez-vous √† l'aide de l'utilisateur **manager**.  Veuillez fermer votre browser.  \r\nVeuillez le r√©ouvrir.  \r\nVoil√†, vous devriez automatiquement √™tre authentifi√©, veuillez observer l'√©tat de la Navbar pour vous en assurer.\r\n\r\nüí≠ O√π puis-je observer l'√©tat des donn√©es sauvegard√©es dans le web storage de mon browser ?  \r\nTout en ayant la fen√™tre de votre application ouverte, via Chrome, allez dans vos outils de d√©veloppeurs : **F12**.  \r\nPuis, dans l'onglet **Application**, vous trouverez dans **Storage** : **Local Storage** et **Session Storage**.  \r\nIci, nous utilisons le **Local Storage**, donc cliquez dessus, vous verrez appara√Ætre `http://localhost:8080`. Cliquez sur cette URL, et vous verrez vos donn√©es de session, quelque chose du style `{\"username\":\"manager\",\"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6Im1hbmFnZXIiLCJpYXQiOjE2NjE3NjM3MDksImV4cCI6MTc0ODE2MzcwOX0.jAxH0WsOgiK5vf4QduDZ8JgTR-SKC42G9aPieV_OTOo\"}`.  \r\nN'h√©sitez pas √† faire un clic droit sur l'URL `http://localhost:8080`, puis **Clear**.  \r\nSi vous faites ensuite un refresh de votre page, comme votre session aura √©t√© effac√©e, votre utilisateur ne sera plus connect√©. Votre Navbar afficher le menu pour un utilisateur anonyme !  \r\nFaites ce test, c'est int√©ressant üòâ.\r\n\r\nSi tout fonctionne bien, faites un **commit** de votre repo (**web2**) avec le message\r\n\"**web storage**\".\r\n\r\nEn cas de souci, vous pouvez utiliser le code du tutoriel :\r\n\r\n- pour le frontend : [web-storage](https://github.com/e-vinci/js-demos/tree/main/frontend/frontend-essentials/web-storage).\r\n- pour l'API : [safe](https://github.com/e-vinci/js-demos/tree/main/backend-restful-api/restful-api-essentials/safe).\r\n\r\n## <a id=\"a3\"></a> a.3) Persistance de donn√©es de session via des cookies\r\n### a.3.1) Introduction \r\n\r\nUn cookie repr√©sente des donn√©es qu'un serveur envoie √† un browser.  \r\nLe browser peut sauver ce cookie. Pour chaque requ√™te faite au serveur sur la m√™me origine (que l'origine o√π le cookie a √©t√© re√ßu), le cookie sera automatiquement envoy√© au serveur.\r\n\r\nIl fut un temps o√π les cookies √©taient utilis√©s comme un m√©canisme g√©n√©ral de stockage de donn√©es c√¥t√© client. \r\n\r\nüëç Actuellement, si les cookies sont utilis√©s pour sauvegarder les donn√©es de session, il faut se prot√©ger contre les attaques XSS et rendre les cookies inaccessibles au JavaScript. On utilise donc les cookies **HttpOnly** qui sont inaccessibles √† la **Document.cookie API**. \r\n\r\nDu coup, si des donn√©es de session doivent √™tre utilis√©e pour l'IHM, on ne peut pas se passer du **web storage** !\r\n\r\nPour la suite, on va donc voir :\r\n- comment utiliser Express pour cr√©er des cookies au niveau d'une API ;\r\n- comment rendre ces cookies inaccessibles aux attaques XSS en configurant **HttpOnly** ;\r\n- que, comme les cookies sont envoy√©s automatiquement au serveur, il faudra mettre √† jour notre IHM pour ne plus envoyer le token via un authorization header. L'API va charger le token dans le cookie, et comme le cookie sera automatiquement envoy√© au serveur via le browser, le code de l'IHM et les fetch seront plus simples. \r\n- l'emb√™tant dans ce que nous allons faire, c'est que comme nous allons s√©curiser le cookie, nous n'aurons pas acc√®s au **username** via le cookie... Nous pourrions :\r\n    - soit toujours utiliser le web storage pour sauvegarder le **username**, \r\n    - soit accepter de ne plus afficher le **username** et avoir aucun nouveau code √† ajouter au niveau du frontend (juste enlever les authorization header inutiles) ;\r\n    - soit mettre √† jour l'API pour offrir une route de type **GET /users/me** qui renvoie les donn√©es d'un utilisateur √† la demande d'une requ√™te cliente. Dans ce cas-l√†, √† chaque fois que l'utilisateur ouvre le browser, la premi√®re chose √† faire serait d'appeler cette op√©ration de l'API.\r\n\r\nPour le tutoriel, nous avons choisi la premi√®re option. Dans vos exercices optionnels, n'h√©sitez pas √† explorer une autre option.\r\n\r\nüí≠ Mais pourquoi s√©curiser le cookie et le rendre inaccessible au JS ?  \r\nH√© bien, imaginez qu'un attaquant arrive √† faire une attaque XSS, via un JS malicieux, renvoyant le cookie de chaque utilisateur qui affiche le menu des pizzas vers un serveur malicieux...  \r\nVia ce cookie, qui contient le token de l'utilisateur, le pirate peut se faire passer pour l'utilisateur pirat√© !  \r\nBon, pour la pizzeria, c'est p-e pas si grave, mais imaginez si c'est le token associ√© √† votre compte banquaire !  \r\nSi le cookie est inaccessible au JS, il est donc impossible pour un hackeur, via du JS malicieux, d'acc√©der au token, et donc, de l'envoyer üòå.\r\n\r\n### a.3.2) Gestion de sessions c√¥t√© client via Express pour une API\r\n#### a.3.2.1) Intro\r\nNous allons donc cr√©er une nouvelle version de l'API sauvegardant le token d'un utilisateur au sein d'un cookie, ainsi que son username, sans que ces infos soient accessible au JS c√¥t√© client.\r\n\r\nPour ce faire nous allons utiliser la librairie [cookie-session](https://github.com/expressjs/cookie-session) qui permet d'enregistrer des donn√©es de session dans des cookies.\r\n\r\nNous allons maintenant continuer le d√©veloppement de l'API [safe](https://github.com/e-vinci/js-demos/tree/main/backend-restful-api/restful-api-essentials/safe).\r\n\r\nAu sein de votre repo **web2**, veuillez cr√©er le projet nomm√© **/web2/tutorials/pizzeria/api/cookies** sur base d'un copi√© coll√© de **/web2/tutorials/pizzeria/api/safe** (ou [safe](https://github.com/e-vinci/js-demos/tree/main/backend-restful-api/restful-api-essentials/safe)).\r\n\r\nPour la suite du tutoriel, nous consid√©rons que tous les chemins absolus d√©marrent du r√©pertoire\r\n**/web2/tutorials/pizzeria/api/cookies**.\r\n\r\nVeuillez installer la librairie **cookie-session** au sein de votre nouveau projet **auths** :\r\n```bash\r\nnpm i cookie-session\r\n```\r\n\r\n#### a.3.2.2) Utilisation de la fonction middleware `cookieSession`\r\n\r\nVeuillez mettre √† jour **/app.json** pour mettre en place la gestion de cookies :\r\n\r\n```js {4,12-23}\r\nconst express = require('express');\r\nconst cookieParser = require('cookie-parser');\r\nconst logger = require('morgan');\r\nconst cookieSession = require('cookie-session');\r\n\r\nconst usersRouter = require('./routes/users');\r\nconst pizzaRouter = require('./routes/pizzas');\r\nconst authsRouter = require('./routes/auths');\r\n\r\nconst app = express();\r\n\r\nconst expiryDateIn3Months = new Date(Date.now() + 1000 * 60 * 60 * 24 * 30 * 3);\r\nconst cookieSecreteKey = 'YouWouldnot!not!like!mypizza';\r\napp.use(\r\n  cookieSession({\r\n    name: 'user',\r\n    keys: [cookieSecreteKey],\r\n    cookie: {\r\n      httpOnly: true,\r\n      expires: expiryDateIn3Months,\r\n    },\r\n  }),\r\n);\r\n\r\napp.use(logger('dev'));\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: false }));\r\napp.use(cookieParser());\r\n\r\napp.use('/users', usersRouter);\r\napp.use('/pizzas', pizzaRouter);\r\napp.use('/auths', authsRouter);\r\n\r\nmodule.exports = app;\r\n```\r\n\r\nNous avons donc bien indiqu√© que le cookie est inaccessible au JS via : `httpOnly: true`.\r\n\r\nNous avons fait en sorte que le cookie soit sign√© via la cl√© `cookieSecreteKey`.  \r\nLe m√©canisme de signature correspond √† ce qui a √©t√© vu dans le cadre des tokens JWT.  \r\nAinsi, si un cookie venait √™tre modifi√© par un utilisateur, lors de la v√©rification du cookie, cela sera automatiquement d√©tect√© par la fonction middleware `cookieSession` et la session ne sera pas cr√©√©e.\r\n\r\nPour info, la fonction middleware `cookieSession` va cr√©er deux cookies :\r\n- un cookie portant comme nom la valeur de `name` ; il est encod√© en base64. N'h√©sitez pas √† vous amuser √† d√©coder un cookie g√©n√©r√© par `cookieSession` sur [base64decode](https://www.base64decode.org/).\r\n- un cookie portant comme nom la valeur de `name` + `.sig` : c'est la signature qui pr√©vient contre le \"tempering\" (acte intentionnel mais non autoris√© qui am√®ne √† la modification d'un syst√®me ou de donn√©es).\r\n\r\n#### a.3.2.3) Lecture et ajout de donn√©es de session via `req.session`\r\nPour cr√©er des donn√©es de session, il suffit de simplement les ajouter √† l'objet **`req.session`**.\r\n\r\nDans le cadre de la RESTful API g√©rant les pizzas, cela est fait lors d'une op√©ration de type **register** ou **login**.\r\n\r\nVeuillez mettre √† jour le router **/routes/auths.js** :\r\n\r\n```js numbered {17,19,33,35,38-42,44-47}\r\nconst express = require('express');\r\nconst { register, login } = require('../models/users');\r\n\r\nconst router = express.Router();\r\n\r\n/* Register a user */\r\nrouter.post('/register', async (req, res) => {\r\n  const username = req?.body?.username?.length !== 0 ? req.body.username : undefined;\r\n  const password = req?.body?.password?.length !== 0 ? req.body.password : undefined;\r\n\r\n  if (!username || !password) return res.sendStatus(400); // 400 Bad Request\r\n\r\n  const authenticatedUser = await register(username, password);\r\n\r\n  if (!authenticatedUser) return res.sendStatus(409); // 409 Conflict\r\n\r\n  createCookieSessionData(req, authenticatedUser);\r\n\r\n  return res.json({ username: authenticatedUser.username });\r\n});\r\n\r\n/* Login a user */\r\nrouter.post('/login', async (req, res) => {\r\n  const username = req?.body?.username?.length !== 0 ? req.body.username : undefined;\r\n  const password = req?.body?.password?.length !== 0 ? req.body.password : undefined;\r\n\r\n  if (!username || !password) return res.sendStatus(400); // 400 Bad Reques\r\n\r\n  const authenticatedUser = await login(username, password);\r\n\r\n  if (!authenticatedUser) return res.sendStatus(401); // 401 Unauthorized\r\n\r\n  createCookieSessionData(req, authenticatedUser);\r\n\r\n  return res.json({ username: authenticatedUser.username });\r\n});\r\n\r\n/* Logout a user */\r\nrouter.get('/logout', (req, res) => {\r\n  req.session = null;\r\n  return res.sendStatus();\r\n});\r\n\r\nfunction createCookieSessionData(req, authenticatedUser) {\r\n  req.session.username = authenticatedUser.username;\r\n  req.session.token = authenticatedUser.token;\r\n}\r\n\r\nmodule.exports = router;\r\n```\r\n\r\nDans le code ci-dessus, nous pr√©parons les donn√©es de session qui seront √©crites dans le cookie √† l'aide de l'objet `req.session`.  \r\nLorsque nous renvoyons du JSON aux clients, nous ne renvoyons plus le token, mais juste le username de l'utilisateur. L'application cliente, le browser, pourra utiliser cette info pour afficher le nom de l'utilisateur. Pour rappel, le browser n'a pas acc√®s, via le JS, √† l'info se trouvant dans le cookie.\r\n\r\nQuand nous g√©rons une session via des cookies, il n'est pas √©vident de bien cl√¥re une session. Nous avons cr√©√© une nouvelle op√©ration de type **GET /auths/logout** qui permet d'effacer les donn√©es de session d'un utilisateur.\r\n\r\nIl nous reste √† changer le m√©canisme d'autorisation.\r\nLes tokens ne seront plus re√ßu via un authorization header, mais via un cookie.  \r\nNous allons donc mettre √† jour le middleware **/utils/authorize** (1 seule ligne) :\r\n```js numbered {7}\r\nconst jwt = require('jsonwebtoken');\r\nconst { readOneUserFromUsername } = require('../models/users');\r\n\r\nconst jwtSecret = 'ilovemypizza!';\r\n\r\nconst authorize = (req, res, next) => {\r\n  const { token } = req.session;\r\n  if (!token) return res.sendStatus(401);\r\n\r\n  try {\r\n    const decoded = jwt.verify(token, jwtSecret);\r\n    console.log('decoded', decoded);\r\n    const { username } = decoded;\r\n\r\n    const existingUser = readOneUserFromUsername(username);\r\n\r\n    if (!existingUser) return res.sendStatus(401);\r\n\r\n    req.user = existingUser; // request.user object is available in all other middleware functions\r\n    return next();\r\n  } catch (err) {\r\n    console.error('authorize: ', err);\r\n    return res.sendStatus(401);\r\n  }\r\n};\r\n\r\nconst isAdmin = (req, res, next) => {\r\n  const { username } = req.user;\r\n\r\n  if (username !== 'admin') return res.sendStatus(403);\r\n  return next();\r\n};\r\n\r\nmodule.exports = { authorize, isAdmin };\r\n```\r\n\r\n#### a.3.2.4) Test de la RESTful API via REST Client\r\nIl nous reste √† tester nos requ√™tes via REST Client.\r\n\r\nIl n'y a pas de nouvelles notions √† apprendre pour utiliser REST Client avec des cookies : le comportement par d√©faut de REST Client, lorsqu'un cookie est renvoy√© dans une r√©ponse, est d'inclure ce cookie dans chaque requ√™te vers la m√™me origine.\r\n\r\nD√®s lors, pour tester l'API, il suffit d'enlever tous les authorization headers et de rajouter une requ√™te pour tester l'effacement d'une session.\r\n\r\nVeuillez tester les requ√™tes √† l'aide de **/REST Client/pizzas.http** :\r\n```http\r\n######### NORMAL OPERATION  ###########\r\n\r\n### Read all pizzas\r\nGET http://localhost:3000/pizzas\r\n\r\n### Read all pizzas with File variable\r\n@baseUrl = http://localhost:3000\r\nGET {{baseUrl}}/pizzas\r\n\r\n### Read all pizzas sorted by title (ascending)\r\nGET {{baseUrl}}/pizzas/?order=+title\r\n\r\n### Read all pizzas sorted by title (descending)\r\nGET {{baseUrl}}/pizzas/?order=-title\r\n\r\n### Read pizza identified by 2\r\nGET {{baseUrl}}/pizzas/2\r\n\r\n### Create a pizza by using the admin account\r\n#### First login as the admin\r\nPOST {{baseUrl}}/auths/login\r\nContent-Type: application/json\r\n\r\n{\r\n    \"username\":\"admin\",\r\n    \"password\":\"admin\"\r\n}\r\n\r\n#### Create a pizza with the admin token\r\nPOST {{baseUrl}}/pizzas\r\nContent-Type: application/json\r\n\r\n{\r\n    \"title\":\"Magic Green\",\r\n    \"content\":\"Epinards, Brocolis, Olives vertes, Basilic\"\r\n}\r\n\r\n### Delete pizza identified by 2 with the admin token\r\nDELETE {{baseUrl}}/pizzas/2\r\n\r\n### Update the pizza identified by 6 with the admin token\r\nPATCH {{baseUrl}}/pizzas/6\r\nContent-Type: application/json\r\n\r\n{\r\n    \"title\":\"Magic Green 2\"\r\n}\r\n\r\n\r\n######### ERROR OPERATION  ###########\r\n\r\n### 1. Create a pizza without a token\r\nPOST {{baseUrl}}/pizzas\r\nContent-Type: application/json\r\n\r\n{\r\n    \"title\":\"Magic Green\",\r\n    \"content\":\"Epinards, Brocolis, Olives vertes, Basilic\"\r\n}\r\n\r\n### 2. Create a pizza without being the admin, use manager account\r\n#### 2.1 First login as the manager\r\nPOST {{baseUrl}}/auths/login\r\nContent-Type: application/json\r\n\r\n{\r\n    \"username\":\"manager\",\r\n    \"password\":\"manager\"\r\n}\r\n\r\n#### 2.2 Try to create a pizza with the manager token\r\nPOST {{baseUrl}}/pizzas\r\nContent-Type: application/json\r\n\r\n{\r\n    \"title\":\"Magic Green\",\r\n    \"content\":\"Epinards, Brocolis, Olives vertes, Basilic\"\r\n}\r\n\r\n### Read pizza which does not exists\r\nGET {{baseUrl}}/pizzas/100\r\n\r\n### Create a pizza which lacks a property\r\nPOST {{baseUrl}}/pizzas\r\nContent-Type: application/json\r\n\r\n{\r\n    \"content\":\"Epinards, Brocolis, Olives vertes, Basilic\"\r\n}\r\n\r\n### Create a pizza without info for a property\r\nPOST {{baseUrl}}/pizzas\r\nContent-Type: application/json\r\n\r\n{\r\n    \"title\":\"\",\r\n    \"content\":\"Epinards, Brocolis, Olives vertes, Basilic\"\r\n}\r\n\r\n### Update for a pizza which does not exist\r\nPATCH {{baseUrl}}/pizzas/200\r\nContent-Type: application/json\r\n\r\n{\r\n    \"title\":\"Magic Green 2\"\r\n}\r\n\r\n### Update for a pizza which does not provide any info for a property\r\nPATCH {{baseUrl}}/pizzas/1\r\n\r\nContent-Type: application/json\r\n\r\n{\r\n    \"title\":\"Magic Green 2\",\r\n    \"content\":\"\"\r\n}\r\n```\r\n\r\n**/REST Client/auths.http** a √©t√© mis √† jour pour tester **GET /auths/logout** :\r\n```http\r\n### Logout any user\r\nGET {{baseUrl}}/auths/logout\r\n```\r\n\r\nPour ajouter une pizza, il suffit juste :\r\n1. De loguer l'admin.\r\n2. De cr√©er une nouvelle pizza ; le cookie est automatiquement envoy√©.\r\n\r\nAdmettons que vous souhaitez tester l'ajout d'une pizza sans envoyer de token :\r\n1. Lancez l'op√©ration de logout (GET /auths/logout) ; le cookie renvoy√© ne contient pas de donn√©es de session ;\r\n2. Tentez la cr√©ation d'une pizza qui renverra un code **401 Unauthorized**.\r\n\r\nSi tout fonctionne bien, faites un **commit** de votre repo (**web2**) avec le message\r\n\"**cookies api**\".\r\n\r\nEn cas de souci, vous pouvez utiliser le code du tutoriel [cookies](https://github.com/e-vinci/js-demos/tree/main/backend-restful-api/restful-api-essentials/cookies).\r\n\r\n### a.3.3) Gestion de session c√¥t√© client via une IHM et des cookies\r\n\r\nA pr√©sent que notre API **cookies** renvoie les donn√©es de session dans un cookie non accessible par du JS, nous souhaitons mettre √† jour notre IHM pour utiliser cette API.\r\n\r\nNous allons repartir de la derni√®re version de notre frontend.\r\n\r\nAu sein de votre repo **web2**, veuillez cr√©er le projet nomm√© **/web2/tutorials/pizzeria/hmi/cookies** sur base d'un copi√© coll√© de **/web2/tutorials/pizzeria/hmi/web-storage** (ou [web-storage](https://github.com/e-vinci/js-demos/tree/main/frontend/frontend-essentials/web-storage)).\r\n\r\nPour la suite du tutoriel, nous consid√©rons que tous les chemins absolus d√©marrent du r√©pertoire\r\n**/web2/tutorials/pizzeria/hmi/cookies**.\r\n\r\nAfin de sauvegarder les donn√©es de session, c'est √† dire l'objet **authenticatedUser** contenant juste un username, nous ne devons m√™me pas mettre √† jour le fichier **/usr/utils/auths.js**. En effet, l'API **cookies** renvoie un objet du genre `{username: \"manager\"}`. Au niveau de l'IHM, le code est donc toujours fonctionnel pour sauvegarder le username gr√¢ce √† `authenticatedUser`.\r\n\r\nIl ne reste donc qu'√† changer le code o√π nous avons besoin d'une autorisation. Pour l'application de gestion de la pizzeria, il s'agit de la cr√©ation de pizza.  \r\nVeuillez donc mettre √† jour **/src/Components/AddPizzaPage.js** en enlevant ces deux lignes :\r\n- l'authenticatedUser : `const authenticatedUser = getAuthenticatedUser();` et l'import associ√© (`import { getAuthenticatedUser } from '../../utils/auths';`),\r\n- la ligne s'occupant de l'authorization header : `Authorization: authenticatedUser.token`.\r\n\r\nVeuillez tester votre derni√®re version du frontend.\r\nLoguez-vous avec l'utilisateur **admin** (et le password **admin**).  \r\nAjoutez une pizza et v√©rifiez qu'elle s'affiche bien.  \r\n\r\nüí≠ Comment v√©rifier le cookie ?  \r\nTout en ayant la fen√™tre de votre application ouverte, via Chrome, allez dans vos outils de d√©veloppeurs : **F12**.  \r\nPuis, dans l'onglet **Application**, cliquez sur **Cookies**, vous verrez appara√Ætre `http://localhost:8080`. Cliquez sur cette URL, et vous verrez vos 2 cookies de session, **user.sig** et **user**.  \r\nN'h√©sitez pas √† aller d√©coder la valeur du cookie **user** sur [base64decode](https://www.base64decode.org/) en faisant un copier / coller de **Value**. Vous devriez voir quelque chose appara√Ætre du style `{\"username\":\"manager\",\"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6Im1hbmFnZXIiLCJpYXQiOjE2NjE3NzUxMDgsImV4cCI6MTc0ODE3NTEwOH0.sAZqq6vbrjCCZZoLH-n8hJKBoXJJJ8jEoupk8xKu5WI\"}`  !\r\n\r\nToujours dans l'onglet **Application** des outils de d√©veloppeurs de Chrome, faites un clear des cookies : clic droit sur `http://localhost:8080`, **Clear**.  \r\nTentez maintenant d'ajouter une pizza... Ca ne fonctionne plus, et c'est bien normal, car il n'y a plus de token qui est envoy√© √† l'API !  \r\n\r\nSuite √† ces tests, si tout fonctionne bien, faites un **commit** de votre repo (**web2**) avec le message \"**cookies hmi**\".\r\n\r\nEn cas de souci, vous pouvez utiliser le code du tutoriel :\r\n\r\n- pour le frontend : [cookies](https://github.com/e-vinci/js-demos/tree/main/frontend/frontend-essentials/cookies).\r\n- pour l'API : [cookies](https://github.com/e-vinci/js-demos/tree/main/backend-restful-api/restful-api-essentials/cookies).\r\n\r\nüí≠ Notons que cette version de notre frontend pourrait √™tre am√©lior√©e. Actuellement, lorsqu'on fait un logout, on n'efface pas le cookie du browser.  \r\nComment feriez vous ? Vous pourriez par exemple appeler la m√©thode **GET /auths/logout** üòâ.\r\n\r\n# <a id=\"b\"></a> b) Exercice 8.1 : Persistance de la session de myMovies dans le web storage\r\nLors de l'exercice pr√©c√©dent (Exercice 7.2), vous avez d√©velopp√© une application qui permet de bien g√©rer des films, √† l'exception du fait que quand vous fermez votre browser, vous devez √† chaque fois vous reconnecter.\r\n\r\nVeuillez faire en sorte que vos donn√©es de session soient sauvegard√©es :\r\n- dans le **localStorage** si l'on clique sur une checkbox \"Remember me\" du login ou du register.\r\n- dans le **sessionStorage** si l'on ne clique pas sur la checkbox \"Remember me\" lors du login ou du register.\r\n\r\nAfin de r√©aliser cet exercice, voici les contraintes d'impl√©mentation :\r\n- Veuillez d√©marrer votre API d√©velopp√©e pr√©c√©demment : **/exercises/module7/7.2/api**.\r\n- Pour le frontend, utilisez le contenu de votre r√©pertoire d'exercices **/exercises/module7/7.1/hmi** comme point de d√©part pour cr√©er, dans votre repository local et\r\nvotre web repository (normalement appel√© **web2**), le r√©pertoire nomm√©\r\n**/exercises/module8/8.1/hmi**.\r\n-\tVeuillez utiliser le proxy de votre frontend afin de contourner les probl√®mes associ√© √† la gestion des CORS.\r\n\r\n\r\n#### ü§ù Tips\r\nCet exercice est l'application du tutoriel vu dans ce module-ci. N'h√©sitez pas donc √† rejouer les √©tapes vues dans le tutoriel au niveau de votre API : [a.2) Persistance de donn√©es de sessions via le web storage](#a2).\r\n\r\nNous vous recommandons, dans un premier temps, de g√©rer les sessions dans le localStorage, sans ajouter la fonctionnalit√© **Remember me**.  \r\nUne fois que c'est fonctionnel, il sera temps de g√©rer le **Remember me**.\r\n\r\nVous allez pouvoir refaire un peu de gestion d'√©v√©nements pour d√©tecter les clics sur une checkbox. N'h√©sitez pas √† voir ce que propose **Bootstrap 5** pour les **checkboxes**.\r\n\r\nüí≠ Prenez un moment pour voir comment g√©rer la persistance de l'info 'Remember me'...  \r\nEst-ce que ce n'est pas une donn√©e de session qui doit persister lorsque l'utilisateur ferme son browser ?  \r\nEn effet, point de vue ergonomie, il est int√©ressant que le dernier choix de l'utilisateur soit toujours pr√©sent√©. La checkbox devrait donc rester **checked** ou pas, tant que l'utilisateur ne change pas son √©tat, via un clic, ou via un Logout ; et cet √©tat doit subsister aux travers des connexions (ouvertures / fermetures du browser).\r\n\r\nSi vous g√©rez bien l'info 'Remember me' au travers des sessions, vous devriez facilement d√©cider si les donn√©es de **authenticatedUser** sont √† sauvegarder dans le localStorage ou le sessionStorage.\r\n\r\nVeuillez faire un **commit** de votre code avec le message suivant : \r\n\"**myMovies : module 8 : web storage**\"\".\r\n\r\nNB : Le code de vos applications se trouve dans votre repository local et\r\nvotre web repository (normalement appel√© **web2**) dans le r√©pertoire nomm√©\r\n**/exercises/module8/8.1/hmi**.\r\n\r\n# <a id=\"c\"></a> c) D√©ploiement d'applications sur le cloud\r\n## <a id=\"c1\"></a> c.1) Introduction\r\nIl existe √©norm√©ment de possibilit√©s pour d√©ployer une application web, pour la rendre disponible sur le web.  \r\nPour certains, comme des administrateurs r√©seaux ou des responsables de l'infrastructure informatique, il s'agit d'un m√©tier √† part enti√®re.  \r\nMais de plus en plus, avec l'avanc√©e des services sur le cloud, les d√©veloppeurs prennent un r√¥le important dans le d√©ploiement des applications.\r\n\r\nVoici un diagramme qui exprime bien les diff√©rentes fa√ßons de d√©ployer une applications :\r\n\r\n<ScrollableImage name=\"deployment.png\" minWidth=\"600px\" maxWidth=\"881x\" />\r\n<figcaption>Diff√©rents types de d√©ploiement d'application [R.65]</figcaption>\r\n\r\nSur ce diagramme, tout √† gauche, nous sommes enti√®rement responsable de la mise √† disposition de l'infrastructure. Il faut donc d'√©normes connaissances r√©seaux, au niveau OS, afin de mettre √† disposition des serveurs, les s√©curiser,...\r\n\r\nLorsqu'on va vers la droite du diagramme, on passe vers la d√©mat√©rialisation des services, vers le cloud, qui offre principalement trois types de services :\r\n- **IaaS** ou **Infrastructure as a Service** : nous recevons toute l'infrastructure, nous devons encore nous occuper du reste, la gestion d'un OS (Linux, Windows...), les bases de donn√©es, les applications et leurs donn√©es ; Amazon Web Services, Microsoft Azure, Google Cloud, OVHcloud offrent ce genre de services...\r\n- **PaaS** ou **Platform as a Service** : nous recevons tout ce qu'il faut pour simplement d√©velopper des applications ; heroku, Amazon Web Services, Microsoft Azure, Google Cloud, OVHcloud offrent ce genre de services...\r\n- **SaaS** ou **Software as a Service** : nous recevons des applications pr√™tes √† √™tre utilis√©es ; office 365 est un exemple, Github en est un autre.\r\n\r\nLorsque nous allons d√©ployer nos RESTful API, nous allons donc tr√®s souvent utiliser un **PaaS**. En effet, voici les √©tapes principales pour le d√©ploiement :\r\n- cr√©er et configurer le type d'application que nous allons d√©ployer avec les outils offerts par le provider : indiquer que nous souhaitons d√©velopper une application **Node.js** ;\r\n- cr√©er un git repository pour chaque projet et faire un push des sources de notre application via les outils offerts par le provider ;\r\n- build et d√©ploiement automatique de l'application seront faits en utilisant les outils du provider, via un service accessible par une URL de d√©veloppement offerte par le provider.\r\n\r\nChaque provider va fournir une recette de cuisine pour pouvoir d√©ployer une application. Il est donc important de trouver la bonne documentation d√©crivant toutes les √©tapes.\r\n\r\nPour d√©ployer le frontend d'une SPA, les √©tapes principales sont similaires au d√©ploiement d'une RESTful API. N√©anmoins, il existe des outils qui permettent de faciliter le d√©ploiement du frontend d'une SPA car ce sont juste des assets √† partager sur le web, il n'y a pas d'intelligence √† fournir c√¥t√© serveur pour g√©n√©rer du contenu.  \r\nDu coup, on peut utiliser des CDN (Content Delivery Network), des groupes de serveur qui travaillent ensemble pour fournir nos assets de mani√®re extra rapide sur Internet.  \r\nComme Github offre ce service via **Github Pages**, que c'est gratuit si vous acceptez que votre code source soit publique, c'est un service id√©al pour notre frontend.  \r\nIl faut juste faire attention que votre frontend n'utilise pas de proxy pour contacter votre RESTful API, il doit le faire directement. L'API devra donc g√©rer les CORS pour autoriser l'URL associ√©e √† votre frontend !\r\n\r\nPour d√©ployer nos RESTful API, le facteur principal que nous souhaitons mettre en avant dans ce cours, c'est de b√©n√©ficier d'un service gratuit. Comme nous √©tudions le JS, nous consid√©rons que nous n'avons pas encore besoin d'un h√©bergement offrant de grandes performances. Nous souhaitons juste quelque chose qui nous permette de tester sur le web nos applications et de les partager avec quelques dizaines de personnes. Pour le frontend, via **Github Pages**, nous avons trouv√© un service de qualit√©, partageable avec des milliers de personnes. Par contre, pour h√©berger une API, les services gratuits tendent √† dispara√Ætre.  \r\nAvant l'automne 2022, **Heroku** fournissait un service gratuit qui √©tait parfait pour nos API. Mais ce service va dispara√Ætre. Il y a un petit espoir qu'Heroku mette un \"Student Program\" en place, mais rien de s√ªr.\r\n\r\nDu coup, pour construire une API, il semblerait qu'il ne reste plus que des services qui soient que temporairement gratuits. Le souci avec ce genre de services, c'est que m√™me si c'est gratuit, on vous demande souvent votre carte de cr√©dit, afin de \"v√©rifier que vous n'√™tes pas un robot\" ü§ñ !\r\n\r\nNous avons donc tent√© de s√©lectionner un service gratuit, temporaire, qui ne demande pas de carte de cr√©dit.\r\n\r\n## <a id=\"c2\"></a> c.2) D√©ploiement du frontend sur GitHub Pages\r\n### c.2.1) Informations g√©n√©rales\r\nSi vous n'utilisez pas de proxy dans votre frontend mais que vous faites des requ√™tes vers votre RESTful API en utilisant directement son nom de domaine, il est possible d'utiliser **Github Pages**. \r\n\r\nVotre RESTful API doit donc elle aussi √™tre d√©ploy√©e et vous devez utiliser son URL pour tous les fetch que vous faites.\r\n\r\nVous trouverez une recette de cuisine pour d√©ployer un frontend sur [GitHub Pages](https://pages.github.com/). N√©anmoins, cette recette est tr√®s minimaliste et ne donne pas d'explication sur toutes les choses qu'il y a √† faire pour d√©ployer une SPA qui contient un router.\r\n\r\n### c.2.2) D√©ploiment d'un frontend bas√© sur webpack sur GitHub Pages\r\nComme √ßa n'est pas quelque chose de si simple, nous vous offrons la recette de cuisine pour d√©ployer un frontend qui suit l'architecture propos√©e dans ce cours.\r\n\r\n#### 1. Cr√©ation d'un web repo\r\n- Dans un premier temps, vous devez d√©cider si vous souhaitez d√©ployer votre page en tant que :\r\n    - **user** ou **organization site** : votre nom de repo doit √™tre votre **username** ou le **nom de votre organisation** sur GitHub. L'URL de votre frontend sur GitHub Pages sera : \"**https://[username ou orgnanization-name].github.io**\". Dans ce cas-l√†, vous ne pouvez avoir qu'un seul site d√©ploy√© sur ce nom de domaine.\r\n    - **project site** : vous pouvez donner le nom que vous souhaitez √† votre repo (autre que votre **username** ou le **nom de votre organisation**). L'URL de votre frontend sera : \"**https://[username ou orgnanization-name].github.io/repo-name-for-your-frontend**\".\r\n- Cr√©ez un nouveau web repo **vide** et **publique** sur GitHub Pages en lui donnant le nom que vous avez choisi.  \r\n‚ö° Attention √† ne pas cr√©er de fichier README √† la cr√©ation de votre web repo !\r\n\r\n\r\n#### 2. Cr√©ation de votre repo local pour votre frontend\r\n- Votre frontend doit avoir √©t√© initialis√© sur base du boilerplate [js-frontend-boilerplate](https://github.com/e-vinci/js-frontend-boilerplate) ou [js-phaser-boilerplate](https://github.com/e-vinci/js-frontend-boilerplate).\r\nAttention √† ne pas mettre votre frontend au sein d'un repo git existant. N'h√©sitez pas √† cr√©er une copie de votre frontend √† un autre endroit si celui-ci est d√©j√† contenu dans un web repo.\r\n- Effacez le r√©pertoire **.git** si vous avez cl√¥n√© le boilerplate.\r\n- Tapez ces commandes pour initialiser votre repo local et le synchroniser avec votre web repo :\r\n    ```shell\r\n    git init\r\n    git add .\r\n    git commit -m \"init\"\r\n    git remote add origin https://url-to-your-web-repo.git\r\n    git branch -M main\r\n    git push -u origin main\r\n    ```\r\n\r\n#### 3. Configuration du pr√©fixe en cas de project site\r\n- Si vous avez choisi de cr√©er un **user** ou un **organization site**, vous pouvez passer au point suivant, √† la configuration de l'URL de l'API.\r\n- Si vous avez choisi de cr√©er un **project site** sur GitHub (plut√¥t qu'un **user** ou **organization site**), vous devez configurer le pr√©fixe qui sera √† prendre en compte lors du d√©ploiement du frontend. Par exemple, si votre web repo se nomme \"**my-super-frontend**\", vous devez indiquer ce pr√©fixe au sein de **webpack.config** :\r\n```js\r\nconst PRODUCTION_PATH_PREFIX = '/my-super-frontend/';\r\n```\r\n- NB : Apr√®s cette configuration, tous les appels √† votre site d√©ploy√© sur le cloud seront fonctionnels, le router fera le travail d'offrir la bonne page. Ainsi, m√™me si l'utilisateur acc√®de √† **https://[username].github.io/my-super-frontend/login**, le router ira chercher la route correspondant au chemin **/login** et non pas √† la route **/my-super-frontend/login** (qui n'existe pas et ne devrait pas √™tre configur√©e ; en effet il devrait y avoir une route pour **/login** dans **/src/Components/Router/routes.js**) !\r\n\r\n#### 4. Configuration de l'URL de base vers votre API et utilisation de cette URL\r\n- Cette partie n'est pas directement li√©e √† GitHub Pages. N√©anmoins, elle doit √™tre r√©alis√©e si l'on souhaite que le frontend puisse interroger les op√©rations d'une RESTful API d√©velopp√©e par nos soins.\r\n- Dans **webpack.config**, veuillez configurer l'URL de votre API en fonction du **build mode** :\r\n    - **`DEVELOPMENT_API_BASE_URL`** pour un build de d√©veloppement : laissez **'/api'** si vous souhaitez utiliser le proxy pour appeler votre api ou **http://localhost:3000** si vous pr√©f√©rez appeler directement l'API. Dans ce dernier cas, vous devez avoir autoris√© l'origine de votre frontend (**http://localhost:8080**) via les CORS. \r\n    - **`PRODUCTION_API_BASE_URL`** pour un build de production : donnez l'URL o√π votre application sera d√©ploy√©e, comme par exemple : **'https://your-app-name.azurewebsites.net'**.\r\n- Lors du build de votre application par Webpack, en fonction des valeurs que vous avez donn√©es √† **`DEVELOPMENT_API_BASE_URL`** et **`PRODUCTION_API_BASE_URL`**, **`process.env.API_BASE_URL`** sera remplac√©e par l'URL de base vers votre API gr√¢ce au code du boilerplate !\r\n- Ainsi, pour faire vos appels vers vos API, utilisez la variable globale **`process.env.API_BASE_URL`** au sein de vos **fetch**. Par exemple : \r\n    ```js\r\n    fetch(`${process.env.API_BASE_URL}/auths/login`, options);\r\n    ```\r\n- NB : Lorsque vous lancerez la commande **npm start**, c'est **`DEVELOPMENT_API_BASE_URL`** qui sera utilis√©e pour appeler votre API gr√¢ce √† la variable globale **`process.env.API_BASE_URL`**.  \r\nLorsque vous lancerez la commande **npm run deploy**, c'est **`DEVELOPMENT_API_BASE_URL`** qui sera utilis√©e pour appeler votre API gr√¢ce √† la variable globale **`process.env.API_BASE_URL`**.\r\n\r\n#### 5. D√©ploiement du frontend sur GitHub Pages\r\n- Une fois que tout est configur√© au niveau de votre repo local (et donc du code de votre frontend), il ne reste plus qu'√† lancer le build de production du frontend et le d√©ploiement. Tout cela est offert par le boilerplate en tapant la commande :\r\n```shell\r\nnpm run deploy\r\n```\r\n- La librairie **gh-pages** permet de faire un **push** d'un snapshot du contenu du build de production (se trouvant dans **/dist/**) vers la branche **gh-pages** de votre web repo.\r\n- Si GitHub Pages est configur√© correctement au niveau de votre web repo, quelques secondes ou minutes apr√®s que \"**Published**\" ait √©t√© affich√© dans votre terminal, votre frontend sera disponible sur le cloud via l'URL : **https://[username].github.io** ou **https://[username].github.io/repo-name-for-your-frontend**.\r\n\r\n##### 6. Configuration de GitHub Pages sur votre web repo\r\n- Acc√©dez √† l'URL de votre web repo sur **https://github.com/**.\r\n- Cliquez sur **Settings**, puis sur **Pages**.\r\n- Assurez-vous que : \r\n    - la **Source** soit : **Deploy from a branch**.\r\n    - la **Branch** soit : **gh-pages**.\r\n- Via **Settings**, puis **Pages**, vous avez l'URL de votre frontend qui vous est donn√©e et vous pouvez cliquer sur **Visit site** (pour acc√©der √† votre site).\r\n- √† la racine de votre web repo, vous pouvez visualiser tous les builds qui ont √©t√© tent√©s sur GitHub Pages ; √† droite de la page, il y √† une section **Environments** et un lien **github-pages** : cliquez sur ce lien et vous verrez l'historique des d√©ploiements de votre frontend sur GitHub Pages.\r\n\r\n#### Que se passe-t-il en cas de refresh d'une page offerte par GitHub Pages ?\r\n- Imaginez que l'utilisateur fasse un refresh √† l'URL **https://[username].github.io/my-super-frontend/login**. GitHub Pages est juste un CDN, un serveur de fichiers statiques. Il n'y a pas de fichier qui correspond √† cette URL ! D√®s lors, sans ce boilerplate, vous recevriez une **erreur 404** üò® !\r\n- Lors du build, le boilerplate du cours ([js-frontend-boilerplate](https://github.com/e-vinci/js-frontend-boilerplate) ou [js-phaser-boilerplate](https://github.com/e-vinci/js-frontend-boilerplate)) cr√©e un fichier **404.html** qui est identique √† **index.html**. Ainsi, lorsqu'une ressource n'existe pas au niveau du CDN, GitHub Page renverra le contenu de **404.html**, et notre SPA sera enti√®rement fonctionnelle, m√™me en cas de refresh for√ßant au serveur de nous renvoyer une page üòÖ !  \r\nCar dans le cadre d'une SPA, c'est le JS, via le router, qui permet d'afficher la page associ√©e √† **/login**, une fois que tout le frontend a √©t√© charg√© suite √† l'appel d'**index.html**. Il n'y a pas de page **Login.html** qui existe au niveau du serveur !\r\n\r\n\r\n## <a id=\"c3\"></a> c.3) D√©ploiement d'une API sur Heroku\r\n### c.3.1) Introduction\r\nD√®s le 28 novembre 2022, les \"free Heroku Dynos\" ne seront plus disponibles.  \r\nIl y a malgr√© tout un espoir que pour les √©tudiants, un programme soit mis √† disposition. L'info sera rendue disponible en fin septembre : [Heroku\"s Next Chapter](https://blog.heroku.com/next-chapter).\r\n\r\n### c.3.2) Proc√©dure \"maison\"\r\nSur le site d'Heroku, il existe beaucoup de documentation pour apprendre √† d√©ployer √† l'aide de leurs outils.\r\n\r\nComme il n'est pas si facile de s'y retrouver, voici ci-dessous un r√©sum√© des √©tapes importantes via une proc√©dure \"maison\".\r\n\r\n**Pr√©paration de votre application**\r\n\r\n1. Utilisez les bonnes variables d'environnement dans Node.js en v√©rifiant que **`process.env.PORT`** est bien √©crit dans `/bin/www`.  \r\n*La variable d'environnement `PORT`, accessible sous Node via `process.env.PORT` , est allou√© par Heroku lors du d√©marrage de l'application. Pour `HOST`, le plus simple est de ne pas en avoir : votre serveur √©coute sur toutes les IP. C'est ce qui est fait par d√©faut lorsqu'une application Express est g√©n√©r√©e.*\r\n2. V√©rifiez **`package.json`** : Le script \"start\" sera ce que heroku lance en 1er.  \r\n*Il n'y a normalement rien √† faire, `package.json` doit contenir pour \"start\" :*\r\n``` json\r\n\"scripts\": {\r\n\"start\": \"node ./bin/www\" },\r\n```\r\n3. Cr√©ez un nouvelle app sur Heroku en vous rendant sur [HEROKU](https://www.heroku.com/), **Sign up** puis via le \"Heroku dashboard\" : **New**, **Create**, **New app**.  \r\n*Donnez un nom √† votre Heroku app qui soit associ√© √† votre API.*\r\n4. Installez le heroku buildpack pour node ; via le \"Heroku dashboard\", **Settings**, **Add buildpacks**, **nodejs**.  \r\n*L'URL g√©n√©r√©e pour le buildpack est \"heroku/nodejs\".*\r\n5. Configurez vos variables d'environnement au sein d'Heroku.   \r\n*Si vous n'avez pas de secrets au niveau de votre API, pas de base de donn√©es ou autres services, vous n'avez rien √† faire √† cette √©tape-ci. Sinon, voici la documentation : [Configuration and Config Vars](https://devcenter.heroku.com/articles/config-vars).*\r\n\r\n**Push de votre application sur Heroku √† l'aide de votre git local**\r\n\r\n1. Allez dans le repo de votre application\r\n2. Ajoutez une remote vers le repo de votre Heroku app :\r\n  - Option a) avec heroku CLI : \r\n``` bash\r\nnpm install -g heroku\r\nheroku login\r\nheroku git:remote -a [your_app_name]\r\n```  \r\n  - Option b) sans heroku CLI, directement avec Git : \r\n``` bash\r\ngit remote add heroku https://git.heroku.com/[your_app_name].git\r\n``` \r\n3. Faites un push de la branche en cours vers le master sur Heroku :\r\n``` bash\r\ngit push heroku master\r\n``` \r\n*Si votre branche en cours n'est pas le master :* \r\n``` bash\r\ngit push heroku [branche_en_cours]:master [-f]\r\n``` \r\n*-f si la branche locale est fort diff√©rente du contenu sur Heroku.*\r\n\r\n**Acc√®s √† votre API via le browser**\r\n\r\nSoit **Open app** via \"Heroku dashboard\", soit vous pouvez directement taper dans le browser : **[your_app_name.herokuapp.com**.\r\n\r\n### c.3.3) Syst√®me de fichiers\r\n\r\n‚ö° Sur Heroku, si vous utilisez des fichiers **.json** pour assurer une certaine \"persistance\" des ressources associ√©es √† vos API, ces fichiers seront probablement r√©initialis√©s environ une fois par jour. \r\n\r\nEn effet, Heroku utilise un syst√®me de fichiers √©ph√©m√®res, √† chaque fois qu'une dyno est red√©marr√©e, elle utilise une copie du d√©ploiement le plus r√©cent, c'est-√†-dire les fichiers qui ont √©t√© \"push\" sur heroku pour lancer le build.\r\n\r\nSi vous souhaitez faire persister de l'information sur Heroku pendant plus longtemps qu'une journ√©e, il faudra donc passer soit par une base de donn√©es, soit par des API offrant des op√©rations sur des fichiers (comme Amazon S3 par exemple).\r\n\r\n\r\n## <a id=\"c4\"></a> c.4) D√©ploiement d'une API sur Azure\r\n### c.4.1) Informations g√©n√©rales\r\n**Azure App Service** offre un **PaaS**. Il est ais√© d'y d√©ployer une application Node.js.\r\n\r\nVoici la documentation pour cr√©er une app : [Create a Node.js web app in Azure](https://docs.microsoft.com/en-us/azure/app-service/quickstart-nodejs?tabs=linux&pivots=development-environment-vscode).\r\n\r\nVous aurez le droit √† 60 minutes de processing gratuites par jour, apr√®s quoi votre app renvoie un status code 403. Votre app n'est pas toujours active, mais il est pas √©vident d'estimer si vous tiendrez toute une journ√©e sans erreur 403.\r\n\r\nActuellement, si vous √™tes √©tudiant, vous pouvez b√©n√©ficier de 100$ de cr√©dit par an et vous n'avez pas besoin de carte de cr√©dit ! En suivant le tutoriel propos√© par Microsoft, vous vous rendrez sur [free with Azure for Student](https://azure.microsoft.com/en-in/free/students/) et utiliserez par la suite **Azure App Service**. \r\n\r\nSi vous n'√™tes plus √©tudiant, vous pouvez b√©n√©ficier de services gratuits, certains toujours gratuits, d'autres pendant 12 mois, avec 200$ de cr√©dit pendant 30 jours. Malheureusement il faut une carte de cr√©dit pour vous faire autoriser... \r\n\r\nN'h√©sitez pas √† consulter la [documentation d'App Service](https://docs.microsoft.com/en-us/azure/app-service/) et de jeter un oeil aux formules tarifaires : [App Service pricing](https://azure.microsoft.com/en-us/pricing/details/app-service/linux/).\r\n\r\n### c.4.2) En r√©sum√© pour d√©ployer votre API via VS Code\r\n- N'oubliez pas que votre API va se trouver sur un serveur externe accessible via une URL. Votre frontend lui se trouvera sur une autre URL, probablement que vous l'installerez sur **GitHub Pages** pour obtenir un tr√®s bon service gratuit. Dans ce cas-ci, pour que votre Frontend puisse dialoguer avec votre API, comme **GitHub Pages** n'offre pas de proxy, il vous faudra autoriser des origines au niveau de votre API. Comme vu au Module 4 de ce cours, pensez donc √† utiliser le middleware cors au niveau de votre API et autoriser au moins deux origines :\r\n  - l'URL de votre frontend lors du d√©veloppement. Par exemple : \"**http://localhost:8080**\";\r\n  - l'URL de votre frontend lors de sa mise en production, son URL sur le cloud. Par exemple si le frontend sera d√©ploy√© sur **GitHub Pages** : \"**https://[username ou orgnanization-name].github.io**\" (pour un user ou organization site) ou \"**https://[username ou orgnanization-name].github.io/repo-name-for-your-frontend**\" (pour un project site).\r\n- Il est important d'ouvrir VS Code sur la racine du projet que vous souhaitez d√©ployer : **File**, **Open Folder...** et de s√©lectionner le dossier racine de votre API (le dossier contenant **package.json**).\r\n- Apr√®s avoir s√©lectionn√© **Azure** dans VS Code (clic sur le logo d'Azure), clic droit sur **App Services**, **Create New Web App...**.\r\n- Attention de choisir la formule gratuite lorsque vous suivrez la proc√©dure, en indiquant le tarif **F1**.\r\n- Choisissez aussi une version de Node inf√©rieure √† 18 : **Node 16 LTS** est tr√®s bien.\r\n- Donnez un nom qui n'existe pas √† votre API.\r\n- Pour d√©ployer votre API, clic droit sur l'app qui a √©t√© cr√©√©e et qui porte le nom que vous lui avez donn√© : **Deploy to Web App...**, s√©lection du folder √† d√©ployer (par d√©faut c'est OK si vous avez bien ouvert VS Code √† la racine du code de votre API), puis clic sur **Deploy**\r\n- Acceptez la question \"Always deploy the workspace \"nom-du-folder-de-votre-api\" to \"nom-de-votre-app-pour-votre-api\" : **Yes**.\r\n- Une fois d√©ploy√©, pour acc√©der √† votre API via le browser : clic droit sur le nom de votre app dans VS Code (en dessous de App Services), **Browse Website**.\r\n- L'URL de votre API est : **https://[nom-de-votre-app-pour-votre-api].azurewebsites.net**\r\n\r\n## <a id=\"c5\"></a> c.5) D√©ploiement d'une API sur d'autres providers gratuits\r\nVoici une liste d'autres providers qui pourraient √™tre int√©ressants pour vos d√©ploiements :\r\n- [platform.sh](https://platform.sh/pricing/) : service gratuit pendant 30 jours, pas besoin de carte de cr√©dit.\r\n- [Google Cloud](https://cloud.google.com/pricing) : service offrant 300$ de cr√©dit, pendant 90 jours, il faut une carte de cr√©dit üò®, mais pas de charges sauf si upgrade manuel vers un compte payant.\r\n\r\n## <a id=\"c6\"></a> c.6) D√©ploiement d'une base de donn√©es\r\n### c.6.1) Bases de donn√©es relationnelles\r\nSi vous souhaitez utiliser une base de donn√©es relationnelle, n'h√©sitez pas √† utiliser un serveur Postgres.\r\n\r\nhttps://www.elephantsql.com/ offre un service OK pour une base de donn√©es gratuite sur le cloud.\r\n\r\nHeroku offrait un servir Postgres int√©ressant, mais celui-ci ne sera plus, ou n'est plus, gratuit √† partir de novembre 2022 : https://www.heroku.com/postgres.\r\n\r\n### c.6.2) Bases de donn√©es NoSQL\r\nSi vous souhaitez faire du NoSQL, MongoDB Atlas fournit un service gratuit tr√®s int√©ressant sur le cloud : https://www.mongodb.com/, offrant 500 MB de stockage. \r\n\r\nIl existe un site extr√™mement bien fait, **Full Stack open**, qui vous explique comment utilser ce serveur : [Fullstack Part 3](https://fullstackopen.com/en/part3).\r\n\r\n‚ö° Attention, si vous avez des donn√©es qui sont fort connect√©es, faire le lien entre des documents et moins √©vident qu'avec du SQL (voir la notion d'**Aggregate** sous Mongodb). \r\nSi vous utilisez une base de donn√©es, vous devriez prot√©ger vos secrets. Nous vous recommandons d'utiliser la librairie **dotenv** pour le faire.  \r\nCela est expliqu√© sur le site de **Fulls Stack open** : [Saving data to MongoDB](https://fullstackopen.com/en/part3/saving_data_to_mongo_db).\r\n\r\n# <a id=\"d\"></a> d) Exercice 8.2 : D√©ploiement de myMovies sur le cloud\r\nTout est dit dans le titre üòâ.\r\n\r\nPour le frontend, veuillez utiliser GitHub Pages.\r\n\r\nPour le backend, si vous √™tres √©tudiant, inscrivez-vous sur Azure en tant que **student** pour obtenir vos 100$ de cr√©dit, sans carte de cr√©dit.\r\n\r\n#### ü§ù Tips\r\n- Suivez bien les proc√©dures offertes dans ce cours. \r\n- Pour votre frontend, celui-ci doit avoir √©t√© initialis√© sur base du boilerplate [js-frontend-boilerplate](https://github.com/e-vinci/js-frontend-boilerplate).  \r\nNous vous conseillons :\r\n  - de cr√©er un nouveau repo local en dehors de votre repo **web2** (pour √©viter d'avoir un Git dans le Git) en cl√¥nant [js-frontend-boilerplate](https://github.com/e-vinci/js-frontend-boilerplate) et en lui ajoutant tous les scripts que vous avez d√©velopp√© √† l'**Exercice 8.1**.\r\n  - de bien suivre la proc√©dure : [c.2)  D√©ploiement d'un frontend sur GitHub Pages](#c2).\r\n- Pour votre API, n'oubliez pas d'ouvrir VS Code au niveau du code de votre API et suivez bien la proc√©dure : [c.4) D√©ploiement d'une API sur Azure](#c4).\r\n\r\n\r\n# <a id=\"e\"></a> e) üç¨ Exercice 8.3 : l'essentiel du cours en action\r\n## e.1) Introduction\r\nVoici un exercice qui fait revoir les comp√©tences essentiels de ce cours de JS. Il a √©t√© utilis√© comme examen pour les √©tudiants de Vinci en deuxi√®me ann√©e de bachelier en Informatique de Gestion en ao√ªt 2022. \r\n\r\nNormalement, cette exercice, d√©coup√© en trois questions, devrait se r√©aliser dans un d√©lai de 3h.\r\n\r\nVeuillez t√©l√©charger ce fichier\r\n<LinkFile name=\"examen_js.zip\" target=\"_blank\" download>examen_js.zip</LinkFile>.\r\nCette archive contient un boilerplate pour chaque question et les ressources √† utiliser pour cet examen.\r\n\r\nDans un premier temps, veuillez d√©sarchiver **examen_js.zip** localement sur votre machine.  \r\n‚ö° Veuillez √©viter de le faire sur un r√©pertoire qui est partag√© sur le cloud. En effet, il y a des milliers de fichiers associ√©s aux **node_modules** lorsque vous lancerez l'installation des packages ! Ca serait une vraie horreur √† synchroniser üò® !\r\n\r\n## e.2) Objectif\r\nNous allons d√©velopper deux frontends et une API pour une agence de voyages.\r\n\r\n## e.3) Question 1 : Cr√©er une IHM interactive & moderne\r\nNous souhaitons afficher des lieux de vacances propos√©s par l'agence de voyages. Il y a 5 lieux diff√©rents, chacun avec un id, un nom et une image.\r\n\r\nLe boilerplate pour cette question se trouve dans **/question1**.\r\nVous trouverez 5 images correspondant √† chaque lieu dans le r√©pertoire **/question1/src/img**, ainsi qu'un fichier contenant une liste des lieux avec leur id, leur nom et leur image dans **/question1/src/utils/places.js**.\r\n\r\nVous devez cr√©er deux pages :\r\n-\tLa page d'accueil, accessible avec l'URI \"/\" ou avec un lien nomm√© \"Home\" dans la barre de navigation, doit afficher une liste de tous les noms de lieux de vacances.\r\n-\tLa page de photos, accessible avec l'URI \"/photos\" ou avec un lien nomm√© \"Photos\" dans la barre de navigation, doit afficher un carrousel des lieux propos√©s.\r\n  - Lorsqu'on arrive sur la page initialement, la page doit afficher le 3√®me lieu dans la liste, avec son image et son nom en dessous.\r\n  - La page doit √©galement afficher deux boutons. Le premier permet d'afficher le lieu pr√©c√©dent dans la liste √† la place de celui-ci. Et  l'autre permet d'afficher le lieu suivant. Ces boutons ne doivent pas √™tre cliquables s'il n'y a plus de lieu suivant ou de lieu pr√©c√©dent dans la liste.\r\n\r\nContraintes d'impl√©mentation : \r\n-\tVeuillez utiliser le fichier **/question1/src/utils/places.js** qui reprend des lieux de vacances. Vous devez mettre √† jour ce fichier pour pouvoir l'utiliser dans votre code JS comme module.\r\n-\tAucune autre page ne doit √™tre disponible sur le site web.\r\n-\tVous devez impl√©menter le carrousel vous-m√™me, vous ne pouvez pas utiliser un carrousel de Bootstrap.\r\n-\tUtilisez les images import√©es statiquement dans la liste des lieux de vacances et changez la source de l'image affich√©e quand l'utilisateur clique sur un bouton.\r\n\r\nVoici un exemple de ce √† quoi pourrait ressembler votre site web :\r\n\r\n<ScrollableImage name=\"places.png\" minWidth=\"800px\" maxWidth=\"1599x\" />\r\n\r\n<ScrollableImage name=\"carousel.png\" minWidth=\"800px\" maxWidth=\"1599x\" />\r\n\r\n## e.4) Question 2 : Cr√©er un service web\r\nNous souhaitons d√©velopper une RESTful API pour g√©rer les lieux de vacances propos√©s par l'agence, les utilisateurs du site, ainsi que les lieux favoris de ces utilisateurs.\r\n\r\nLe boilerplate pour l'API de cette question se trouve dans **/question2**, c'est une copie du boilerplate du cours.\r\n\r\nVeuillez cr√©er les op√©rations suivantes :\r\n-\t**Cr√©er un nouveau lieu de vacances**. L'op√©ration doit prendre en entr√©e le nom du lieu ainsi que sa description, et doit retourner l'ID du lieu cr√©√© au format JSON. L'op√©ration doit renvoyer une erreur si le nom ou la description ne sont pas fournis.\r\n-\t**Cr√©er un nouvel utilisateur**. L'op√©ration doit prendre en entr√©e le nom de l'utilisateur ainsi que son adresse mail, et doit retourner l'ID de l'utilisateur cr√©√© au format JSON. L'op√©ration doit renvoyer une erreur si le nom ou l'adresse mail ne sont pas fournis, ainsi que si un utilisateur existe d√©j√† pour cette adresse mail.\r\n-\t**Ajouter un lieu √† ses favoris**. L'op√©ration doit prendre en entr√©e l'ID de l'utilisateur et l'ID du lieu qu'il souhaite ajouter en favori. L'op√©ration doit renvoyer une erreur si aucun utilisateur ne correspond √† l'ID d'utilisateur donn√©, si aucun lieu ne correspond √† l'ID de lieu donn√©, ou si cet utilisateur a d√©j√† ce lieu dans ses favoris.\r\n\r\nVous devez √©galement cr√©er dans le fichier **/question2/RESTClient/tests.http** au minimum une requ√™te par op√©ration que vous devez impl√©menter. Vous pouvez √©galement cr√©er plus de tests si vous le souhaitez.\r\n\r\nContraintes d'impl√©mentation :\r\n-\tL'API que vous devez cr√©er doit correspondre aux principes d'une API RESTful.\r\n-\tVotre API ne peut pas proposer d'autres op√©rations que celles d√©crites ci-dessus.\r\n-\tLes ID que g√©n√®rent votre API doivent provenir du package **uuid**.\r\n-\tLes demandes qui sont cr√©√©es doivent persister et donc survivre au red√©marrage de votre application. Vous pouvez faire persister les demandes c√¥t√© serveur de la mani√®re que vous voulez, du moment que cela soit en JSON. N'h√©sitez pas √† utiliser **/question2/utils/json.js**.\r\n-\tAucune autorisation JWT est n√©cessaire.\r\n\r\n## e.5) Question 3 : Cr√©er une SPA int√©grant une IHM et un web service\r\nGr√¢ce √† l'API que nous avez d√©velopp√© dans la question 2, l'agence de voyages a pu am√©liorer son API pour proposer un syst√®me de recommandations. Cependant, cette API utilise un syst√®me d'Intelligence Artificielle complexe et les op√©rations qui r√©cup√®rent les recommandations peuvent prendre un certain temps. \r\n\r\nLe boilerplate pour cette question se trouve dans **/question3**.\r\nVous devez consommer l'API d√©crite ci-dessous et disponible √† l'adresse **https://places-exam-api.azurewebsites.net** pour afficher des recommandations de lieux de vacances. Cette API accepte les requ√™tes venant de toutes les origines et n'a pas de probl√®me de CORS. Vous ne devez donc pas utiliser de proxy pour consommer cette API.\r\n\r\n| M√©thode HTTP | URI | Op√©ration | Format |\r\n|---|---|---|---|\r\n| **GET** | **/places**| R√©cup√©rer tous les lieux de vacances | Renvoie : `[ { id, name } ]` |\r\n| **GET** | **/recommended** | R√©cup√©rer le lieu de vacances le plus appr√©ci√© | Renvoie : `{ id, name }` |\r\n\r\nSur la page d'accueil du site web, veuillez afficher le nom de tous les lieux de vacances, renvoy√©s par l'API avec l'URI \"/places\" (il n'est pas n√©cessaire d'afficher leur ID). \r\n\r\nToujours sur la page d'accueil, veuillez √©galement afficher le nom du lieu de vacances le plus appr√©ci√©, renvoy√© par l'API avec l'URI \"**/recommended**\". Comme cette op√©ration peut prendre un certain temps, elle ne peut pas ralentir le chargement de la page. Le reste de la page doit √™tre affich√© avant de consommer cette API, et son r√©sultat doit √™tre rajout√© sur la page quand l'op√©ration est termin√©e.\r\n\r\nAucune autre page ne doit √™tre disponible sur le site web. Pensez donc √† effacer le code du boilerplate qui est inutile.\r\n","fields":{"slug":"/modules/8/"},"frontmatter":{"title":"Module 8 : SPA & sessions & d√©ploiement","date":null,"navbarExtraStyles":"","headerImage":"","featuredImage":"","description":"Gestion de session utilisateurs pour suivre des op√©rations sur des ressources & d√©ploiement de SPA sur le cloud","autoMargin":true}},"allImages":{"edges":[{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#683898","images":{"fallback":{"src":"/js2/static/53aa06cf17e4239d0dba6ffd09854e02/0cbce/icon.png","srcSet":"/js2/static/53aa06cf17e4239d0dba6ffd09854e02/0cbce/icon.png 512w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/53aa06cf17e4239d0dba6ffd09854e02/cc23f/icon.webp 512w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1}},"base":"icon.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#d88848","images":{"fallback":{"src":"/js2/static/c4a1984e0b0ce60b9f9f72756293a96e/50940/frontend-technos.jpg","srcSet":"/js2/static/c4a1984e0b0ce60b9f9f72756293a96e/50940/frontend-technos.jpg 461w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/c4a1984e0b0ce60b9f9f72756293a96e/9d85c/frontend-technos.webp 461w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5553145336225597}},"base":"frontend-technos.jpg"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/4231407aeb2eab1eb26748522a49f119/1daa6/js-evolution.png","srcSet":"/js2/static/4231407aeb2eab1eb26748522a49f119/1daa6/js-evolution.png 505w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/4231407aeb2eab1eb26748522a49f119/1d9c9/js-evolution.webp 505w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.3702970297029703}},"base":"js-evolution.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#a8c888","images":{"fallback":{"src":"/js2/static/62895fac28825996f4895ee798c3c5da/964cf/modules-breakdown.png","srcSet":"/js2/static/62895fac28825996f4895ee798c3c5da/ddebf/modules-breakdown.png 750w,\n/js2/static/62895fac28825996f4895ee798c3c5da/964cf/modules-breakdown.png 1056w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/62895fac28825996f4895ee798c3c5da/f59f5/modules-breakdown.webp 750w,\n/js2/static/62895fac28825996f4895ee798c3c5da/280c1/modules-breakdown.webp 1056w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.3759469696969697}},"base":"modules-breakdown.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#081828","images":{"fallback":{"src":"/js2/static/06eb14b228d7c6bc28668b2465327811/63bac/most-pop-programming.png","srcSet":"/js2/static/06eb14b228d7c6bc28668b2465327811/63bac/most-pop-programming.png 516w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/06eb14b228d7c6bc28668b2465327811/a81b8/most-pop-programming.webp 516w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.8507751937984497}},"base":"most-pop-programming.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#080808","images":{"fallback":{"src":"/js2/static/309e0fb8b4416829acfed4f7a501206b/98149/logo_vinci.png","srcSet":"/js2/static/309e0fb8b4416829acfed4f7a501206b/98149/logo_vinci.png 544w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/309e0fb8b4416829acfed4f7a501206b/5eade/logo_vinci.webp 544w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.9044117647058824}},"base":"logo_vinci.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#080808","images":{"fallback":{"src":"/js2/static/fa47b7868326f417638155af9c4e1131/a19b7/mpa-api.png","srcSet":"/js2/static/fa47b7868326f417638155af9c4e1131/1f5ea/mpa-api.png 750w,\n/js2/static/fa47b7868326f417638155af9c4e1131/a19b7/mpa-api.png 847w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/fa47b7868326f417638155af9c4e1131/98a4a/mpa-api.webp 750w,\n/js2/static/fa47b7868326f417638155af9c4e1131/b3688/mpa-api.webp 847w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.4628099173553719}},"base":"mpa-api.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#080808","images":{"fallback":{"src":"/js2/static/0db4cabf70d03ffdaba26ad2279a1f03/36fe5/mpa.png","srcSet":"/js2/static/0db4cabf70d03ffdaba26ad2279a1f03/36fe5/mpa.png 540w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/0db4cabf70d03ffdaba26ad2279a1f03/94f16/mpa.webp 540w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.7259259259259259}},"base":"mpa.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/df3eb96d3792fedc90e824b9ff4ee666/9aa96/spa-monolithic.png","srcSet":"/js2/static/df3eb96d3792fedc90e824b9ff4ee666/9aa96/spa-monolithic.png 541w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/df3eb96d3792fedc90e824b9ff4ee666/65253/spa-monolithic.webp 541w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.7245841035120149}},"base":"spa-monolithic.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/e927b7d4c1aab1dd521632761a53f1b6/a19b7/spa.png","srcSet":"/js2/static/e927b7d4c1aab1dd521632761a53f1b6/1f5ea/spa.png 750w,\n/js2/static/e927b7d4c1aab1dd521632761a53f1b6/a19b7/spa.png 847w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/e927b7d4c1aab1dd521632761a53f1b6/98a4a/spa.webp 750w,\n/js2/static/e927b7d4c1aab1dd521632761a53f1b6/b3688/spa.webp 847w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.4628099173553719}},"base":"spa.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/d5538808d9455e309732cc72d3c16094/5a8ae/bom.png","srcSet":"/js2/static/d5538808d9455e309732cc72d3c16094/5a8ae/bom.png 361w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/d5538808d9455e309732cc72d3c16094/44051/bom.webp 361w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.8531855955678671}},"base":"bom.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#080808","images":{"fallback":{"src":"/js2/static/bb50b3e7a8b2a2cd37a9f3e8139a8d34/05d72/browser.png","srcSet":"/js2/static/bb50b3e7a8b2a2cd37a9f3e8139a8d34/e81f3/browser.png 750w,\n/js2/static/bb50b3e7a8b2a2cd37a9f3e8139a8d34/05d72/browser.png 815w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/bb50b3e7a8b2a2cd37a9f3e8139a8d34/7c1ed/browser.webp 750w,\n/js2/static/bb50b3e7a8b2a2cd37a9f3e8139a8d34/9c789/browser.webp 815w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.6269938650306749}},"base":"browser.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/815bb84493b798e20f6e050fe7d4f297/8ac59/bytes.heif","srcSet":"/js2/static/815bb84493b798e20f6e050fe7d4f297/8ac59/bytes.heif 730w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/815bb84493b798e20f6e050fe7d4f297/fa94f/bytes.webp 730w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.8041095890410959}},"base":"bytes.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/8336698fa5a4150652bf24675d81d450/b818d/console.png","srcSet":"/js2/static/8336698fa5a4150652bf24675d81d450/b818d/console.png 584w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/8336698fa5a4150652bf24675d81d450/2cd0a/console.webp 584w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5941780821917808}},"base":"console.PNG"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#181818","images":{"fallback":{"src":"/js2/static/a2704f93c050f1b8f0af184bca0784e5/bfbd8/copy.png","srcSet":"/js2/static/a2704f93c050f1b8f0af184bca0784e5/bfbd8/copy.png 41w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/a2704f93c050f1b8f0af184bca0784e5/54421/copy.webp 41w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1.048780487804878}},"base":"copy.PNG"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/7c8ef3e05614d0f1331eb1622972209f/ad8b1/dom.heif","srcSet":"/js2/static/7c8ef3e05614d0f1331eb1622972209f/ad8b1/dom.heif 730w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/7c8ef3e05614d0f1331eb1622972209f/4fc4f/dom.webp 730w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.3136986301369863}},"base":"dom.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/2c0e805dbcef0b4210fddd87f2fdcd0b/7d9c5/dom2.gif","srcSet":"/js2/static/2c0e805dbcef0b4210fddd87f2fdcd0b/7d9c5/dom2.gif 486w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/2c0e805dbcef0b4210fddd87f2fdcd0b/3b54a/dom2.webp 486w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5473251028806584}},"base":"dom2.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/20e0138ec54042c9ab8df2df718b51c7/ad8b1/cssom.heif","srcSet":"/js2/static/20e0138ec54042c9ab8df2df718b51c7/ad8b1/cssom.heif 730w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/20e0138ec54042c9ab8df2df718b51c7/4fc4f/cssom.webp 730w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.3136986301369863}},"base":"cssom.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8d818","images":{"fallback":{"src":"/js2/static/9816a79b1cdedb4fd200ae4b1e94ccbd/efde9/js-logo.png","srcSet":"/js2/static/9816a79b1cdedb4fd200ae4b1e94ccbd/27b15/js-logo.png 750w,\n/js2/static/9816a79b1cdedb4fd200ae4b1e94ccbd/efde9/js-logo.png 768w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/9816a79b1cdedb4fd200ae4b1e94ccbd/cfe1c/js-logo.webp 750w,\n/js2/static/9816a79b1cdedb4fd200ae4b1e94ccbd/ea3b7/js-logo.webp 768w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1}},"base":"js-logo.png"}},{"node":{"childImageSharp":null,"base":"red-light.gif"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/283b4c657f5c4a706c3e29d0a08fd451/7edf3/render.heif","srcSet":"/js2/static/283b4c657f5c4a706c3e29d0a08fd451/7edf3/render.heif 730w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/283b4c657f5c4a706c3e29d0a08fd451/29aef/render.webp 730w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.4383561643835616}},"base":"render.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#282828","images":{"fallback":{"src":"/js2/static/302e83d40f9486ab7ea528e217821223/d5cd3/start.png","srcSet":"/js2/static/302e83d40f9486ab7ea528e217821223/d5cd3/start.png 511w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/302e83d40f9486ab7ea528e217821223/02192/start.webp 511w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.40117416829745595}},"base":"start.PNG"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/593d65b45ead31d08b777b977530fbb0/257c8/form.png","srcSet":"/js2/static/593d65b45ead31d08b777b977530fbb0/257c8/form.png 182w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/593d65b45ead31d08b777b977530fbb0/aa09a/form.webp 182w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1.1868131868131868}},"base":"form.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/a4d45cc8f767378935f1a47c6a814bff/c4448/table.png","srcSet":"/js2/static/a4d45cc8f767378935f1a47c6a814bff/c4448/table.png 219w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/a4d45cc8f767378935f1a47c6a814bff/5ce26/table.webp 219w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1.547945205479452}},"base":"table.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#282828","images":{"fallback":{"src":"/js2/static/995b19933afe2efc8abdad9e056f7eb0/c35a8/terminal-1.png","srcSet":"/js2/static/995b19933afe2efc8abdad9e056f7eb0/c35a8/terminal-1.png 481w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/995b19933afe2efc8abdad9e056f7eb0/8a064/terminal-1.webp 481w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1.2390852390852392}},"base":"terminal-1.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#181818","images":{"fallback":{"src":"/js2/static/ec94e10b96163ba7dff989c8073526c9/e4d4e/terminal-2.png","srcSet":"/js2/static/ec94e10b96163ba7dff989c8073526c9/d328f/terminal-2.png 750w,\n/js2/static/ec94e10b96163ba7dff989c8073526c9/e4d4e/terminal-2.png 933w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/ec94e10b96163ba7dff989c8073526c9/dea86/terminal-2.webp 750w,\n/js2/static/ec94e10b96163ba7dff989c8073526c9/92d06/terminal-2.webp 933w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.2722400857449089}},"base":"terminal-2.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#080808","images":{"fallback":{"src":"/js2/static/14110746b5f49459429c355815cd77b3/10f52/express-flow.png","srcSet":"/js2/static/14110746b5f49459429c355815cd77b3/eb8cd/express-flow.png 750w,\n/js2/static/14110746b5f49459429c355815cd77b3/10f52/express-flow.png 800w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/14110746b5f49459429c355815cd77b3/4e646/express-flow.webp 750w,\n/js2/static/14110746b5f49459429c355815cd77b3/130b6/express-flow.webp 800w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.3825}},"base":"express-flow.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/4af4b8ccca63d0a981c68a20bb9658e1/cc4c8/techno-course.png","srcSet":"/js2/static/4af4b8ccca63d0a981c68a20bb9658e1/cc4c8/techno-course.png 721w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/4af4b8ccca63d0a981c68a20bb9658e1/7f7c1/techno-course.webp 721w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5575589459084604}},"base":"techno-course.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/dbf7fef0d0623475d157204fd950008e/cbf92/techno.png","srcSet":"/js2/static/dbf7fef0d0623475d157204fd950008e/cbf92/techno.png 586w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/dbf7fef0d0623475d157204fd950008e/09c5a/techno.webp 586w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.8464163822525598}},"base":"techno.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#c8e8d8","images":{"fallback":{"src":"/js2/static/5c1c4cd476b1911739976c74d5457e03/60e67/middlewares.jpg","srcSet":"/js2/static/5c1c4cd476b1911739976c74d5457e03/60e67/middlewares.jpg 638w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/5c1c4cd476b1911739976c74d5457e03/f273c/middlewares.webp 638w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.7288401253918495}},"base":"middlewares.jpg"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/6b82e2d24f2e455ab5f6479f8f0fd34c/718a6/cors-issue.png","srcSet":"/js2/static/6b82e2d24f2e455ab5f6479f8f0fd34c/3b3b8/cors-issue.png 750w,\n/js2/static/6b82e2d24f2e455ab5f6479f8f0fd34c/718a6/cors-issue.png 1031w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/6b82e2d24f2e455ab5f6479f8f0fd34c/148ba/cors-issue.webp 750w,\n/js2/static/6b82e2d24f2e455ab5f6479f8f0fd34c/53c8e/cors-issue.webp 1031w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.29582929194956353}},"base":"cors-issue.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8e8e8","images":{"fallback":{"src":"/js2/static/cd7a86517cd86bf67e97a9455782f61e/3a7c2/errors.png","srcSet":"/js2/static/cd7a86517cd86bf67e97a9455782f61e/3a7c2/errors.png 589w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/cd7a86517cd86bf67e97a9455782f61e/8d14e/errors.webp 589w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.43803056027164683}},"base":"errors.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/a0a9be40f52062756989e43e359b5c44/4ca31/liveServerFrontSPA.png","srcSet":"/js2/static/a0a9be40f52062756989e43e359b5c44/96859/liveServerFrontSPA.png 750w,\n/js2/static/a0a9be40f52062756989e43e359b5c44/4ca31/liveServerFrontSPA.png 751w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/a0a9be40f52062756989e43e359b5c44/3f918/liveServerFrontSPA.webp 750w,\n/js2/static/a0a9be40f52062756989e43e359b5c44/61905/liveServerFrontSPA.webp 751w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.4274300932090546}},"base":"liveServerFrontSPA.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/9482be8bcc11374b223c4bff1aaa7cef/6c4d1/movies.png","srcSet":"/js2/static/9482be8bcc11374b223c4bff1aaa7cef/44ede/movies.png 750w,\n/js2/static/9482be8bcc11374b223c4bff1aaa7cef/c97ea/movies.png 1080w,\n/js2/static/9482be8bcc11374b223c4bff1aaa7cef/6c4d1/movies.png 1268w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/9482be8bcc11374b223c4bff1aaa7cef/9378c/movies.webp 750w,\n/js2/static/9482be8bcc11374b223c4bff1aaa7cef/6e0c3/movies.webp 1080w,\n/js2/static/9482be8bcc11374b223c4bff1aaa7cef/498dd/movies.webp 1268w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.38564668769716093}},"base":"movies.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/945336ab536627610c9e7fa03999caa2/746ba/proxy.png","srcSet":"/js2/static/945336ab536627610c9e7fa03999caa2/746ba/proxy.png 691w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/945336ab536627610c9e7fa03999caa2/03d38/proxy.webp 691w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.6353111432706222}},"base":"proxy.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/04662f2f0ed1b78bd5ead2c3dec85482/36714/readPizzas.png","srcSet":"/js2/static/04662f2f0ed1b78bd5ead2c3dec85482/36714/readPizzas.png 523w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/04662f2f0ed1b78bd5ead2c3dec85482/dfd8f/readPizzas.webp 523w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.7304015296367113}},"base":"readPizzas.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/8eb2b12643e10670a4e4234ccd8a844e/3d704/xss.png","srcSet":"/js2/static/8eb2b12643e10670a4e4234ccd8a844e/613e6/xss.png 750w,\n/js2/static/8eb2b12643e10670a4e4234ccd8a844e/103d4/xss.png 1080w,\n/js2/static/8eb2b12643e10670a4e4234ccd8a844e/3d704/xss.png 1108w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/8eb2b12643e10670a4e4234ccd8a844e/18c9f/xss.webp 750w,\n/js2/static/8eb2b12643e10670a4e4234ccd8a844e/51d3a/xss.webp 1080w,\n/js2/static/8eb2b12643e10670a4e4234ccd8a844e/88976/xss.webp 1108w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.2842960288808664}},"base":"xss.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/ce4d88f5a75edb2b72efaaa71f7b0efc/e5078/authorizeNOK.png","srcSet":"/js2/static/ce4d88f5a75edb2b72efaaa71f7b0efc/8770b/authorizeNOK.png 750w,\n/js2/static/ce4d88f5a75edb2b72efaaa71f7b0efc/e5078/authorizeNOK.png 809w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/ce4d88f5a75edb2b72efaaa71f7b0efc/35881/authorizeNOK.webp 750w,\n/js2/static/ce4d88f5a75edb2b72efaaa71f7b0efc/a88f0/authorizeNOK.webp 809w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.6093943139678616}},"base":"authorizeNOK.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8d8d8","images":{"fallback":{"src":"/js2/static/02183504e2708ac3e446f29003c8d7bc/60bc5/hacked.png","srcSet":"/js2/static/02183504e2708ac3e446f29003c8d7bc/60bc5/hacked.png 744w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/02183504e2708ac3e446f29003c8d7bc/67170/hacked.webp 744w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.4206989247311828}},"base":"hacked.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/13b65def72e9840d86bcf161d0140f2d/487a4/places.png","srcSet":"/js2/static/13b65def72e9840d86bcf161d0140f2d/8d835/places.png 750w,\n/js2/static/13b65def72e9840d86bcf161d0140f2d/9b397/places.png 1080w,\n/js2/static/13b65def72e9840d86bcf161d0140f2d/c1308/places.png 1366w,\n/js2/static/13b65def72e9840d86bcf161d0140f2d/487a4/places.png 1599w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/13b65def72e9840d86bcf161d0140f2d/25f33/places.webp 750w,\n/js2/static/13b65def72e9840d86bcf161d0140f2d/f7d3e/places.webp 1080w,\n/js2/static/13b65def72e9840d86bcf161d0140f2d/cab24/places.webp 1366w,\n/js2/static/13b65def72e9840d86bcf161d0140f2d/e838a/places.webp 1599w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.35709818636647905}},"base":"places.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#484848","images":{"fallback":{"src":"/js2/static/d500a235cf91fee0cec65a112a3fd9a8/a166b/backend-frameworks.png","srcSet":"/js2/static/d500a235cf91fee0cec65a112a3fd9a8/a166b/backend-frameworks.png 634w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/d500a235cf91fee0cec65a112a3fd9a8/de393/backend-frameworks.webp 634w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5394321766561514}},"base":"backend-frameworks.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/399731383e6a9f8b4309eb146c1875a2/224f4/planning.png","srcSet":"/js2/static/399731383e6a9f8b4309eb146c1875a2/dca3f/planning.png 750w,\n/js2/static/399731383e6a9f8b4309eb146c1875a2/8231f/planning.png 1080w,\n/js2/static/399731383e6a9f8b4309eb146c1875a2/18eed/planning.png 1366w,\n/js2/static/399731383e6a9f8b4309eb146c1875a2/224f4/planning.png 1920w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/399731383e6a9f8b4309eb146c1875a2/9ccac/planning.webp 750w,\n/js2/static/399731383e6a9f8b4309eb146c1875a2/57350/planning.webp 1080w,\n/js2/static/399731383e6a9f8b4309eb146c1875a2/b26a0/planning.webp 1366w,\n/js2/static/399731383e6a9f8b4309eb146c1875a2/b7a91/planning.webp 1920w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.384375}},"base":"planning.PNG"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/8c454120ed3743524b977a50efee14ae/75d45/architecture.png","srcSet":"/js2/static/8c454120ed3743524b977a50efee14ae/c33b9/architecture.png 750w,\n/js2/static/8c454120ed3743524b977a50efee14ae/75d45/architecture.png 859w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/8c454120ed3743524b977a50efee14ae/013ea/architecture.webp 750w,\n/js2/static/8c454120ed3743524b977a50efee14ae/3c3f0/architecture.webp 859w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.6030267753201397}},"base":"architecture.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/df999928d139b76e4624212deb47afa1/c60dc/ajax.png","srcSet":"/js2/static/df999928d139b76e4624212deb47afa1/c60dc/ajax.png 569w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/df999928d139b76e4624212deb47afa1/9f538/ajax.webp 569w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.8927943760984183}},"base":"ajax.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/368b66a6c71ce7ae5149f7fe124c67b4/dedcf/independentFrontBackSPA.png","srcSet":"/js2/static/368b66a6c71ce7ae5149f7fe124c67b4/aa4e8/independentFrontBackSPA.png 750w,\n/js2/static/368b66a6c71ce7ae5149f7fe124c67b4/dedcf/independentFrontBackSPA.png 914w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/368b66a6c71ce7ae5149f7fe124c67b4/54e6a/independentFrontBackSPA.webp 750w,\n/js2/static/368b66a6c71ce7ae5149f7fe124c67b4/d4860/independentFrontBackSPA.webp 914w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.48468271334792123}},"base":"independentFrontBackSPA.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/5033887241592124140462a48f880b31/4c60e/independentFrontBackSPA2.png","srcSet":"/js2/static/5033887241592124140462a48f880b31/57832/independentFrontBackSPA2.png 750w,\n/js2/static/5033887241592124140462a48f880b31/4c60e/independentFrontBackSPA2.png 852w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/5033887241592124140462a48f880b31/73ed4/independentFrontBackSPA2.webp 750w,\n/js2/static/5033887241592124140462a48f880b31/fa338/independentFrontBackSPA2.webp 852w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5762910798122066}},"base":"independentFrontBackSPA2.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/4cf8132263a3922a81198d62fa668e8c/8af70/monolithicSPA.png","srcSet":"/js2/static/4cf8132263a3922a81198d62fa668e8c/9fdee/monolithicSPA.png 750w,\n/js2/static/4cf8132263a3922a81198d62fa668e8c/8af70/monolithicSPA.png 758w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/4cf8132263a3922a81198d62fa668e8c/e02a2/monolithicSPA.webp 750w,\n/js2/static/4cf8132263a3922a81198d62fa668e8c/1677e/monolithicSPA.webp 758w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.712401055408971}},"base":"monolithicSPA.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/7019197416b607b814455c5cde2bfd8d/8a955/authorizeOK.png","srcSet":"/js2/static/7019197416b607b814455c5cde2bfd8d/8a955/authorizeOK.png 747w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/7019197416b607b814455c5cde2bfd8d/b344d/authorizeOK.webp 747w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.6666666666666666}},"base":"authorizeOK.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/cd56be61925d779c9a23f9ecdea56e09/fb68f/login.png","srcSet":"/js2/static/cd56be61925d779c9a23f9ecdea56e09/e56fa/login.png 750w,\n/js2/static/cd56be61925d779c9a23f9ecdea56e09/fb68f/login.png 879w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/cd56be61925d779c9a23f9ecdea56e09/5510b/login.webp 750w,\n/js2/static/cd56be61925d779c9a23f9ecdea56e09/da356/login.webp 879w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5017064846416383}},"base":"login.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#0878b8","images":{"fallback":{"src":"/js2/static/216c8f19b48a13e3af5020937c6495fe/3f056/deployment.png","srcSet":"/js2/static/216c8f19b48a13e3af5020937c6495fe/f74f0/deployment.png 750w,\n/js2/static/216c8f19b48a13e3af5020937c6495fe/3f056/deployment.png 881w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/216c8f19b48a13e3af5020937c6495fe/00e18/deployment.webp 750w,\n/js2/static/216c8f19b48a13e3af5020937c6495fe/73e10/deployment.webp 881w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5811577752553916}},"base":"deployment.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/c83fb5906f6f04cc2f80dc8bb7b6ae97/9a21b/critere-eval.png","srcSet":"/js2/static/c83fb5906f6f04cc2f80dc8bb7b6ae97/eb33c/critere-eval.png 750w,\n/js2/static/c83fb5906f6f04cc2f80dc8bb7b6ae97/9a21b/critere-eval.png 1038w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/c83fb5906f6f04cc2f80dc8bb7b6ae97/44b51/critere-eval.webp 750w,\n/js2/static/c83fb5906f6f04cc2f80dc8bb7b6ae97/8dd70/critere-eval.webp 1038w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.9922928709055877}},"base":"critere-eval.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/9f49136562a5d771c51d7600430566b1/38d9f/eventflow.png","srcSet":"/js2/static/9f49136562a5d771c51d7600430566b1/38d9f/eventflow.png 480w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/9f49136562a5d771c51d7600430566b1/cd74b/eventflow.webp 480w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1.1666666666666667}},"base":"eventflow.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/ff2054d2907d5ebd494875c12fe16a3d/d40cb/middleware-function.png","srcSet":"/js2/static/ff2054d2907d5ebd494875c12fe16a3d/7cb90/middleware-function.png 750w,\n/js2/static/ff2054d2907d5ebd494875c12fe16a3d/d40cb/middleware-function.png 944w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/ff2054d2907d5ebd494875c12fe16a3d/4ffb0/middleware-function.webp 750w,\n/js2/static/ff2054d2907d5ebd494875c12fe16a3d/6c417/middleware-function.webp 944w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.298728813559322}},"base":"middleware-function.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#e8e8e8","images":{"fallback":{"src":"/js2/static/d0eb9efdef86cf105b8020519b702c01/f6ece/pizza2.jpg","srcSet":"/js2/static/d0eb9efdef86cf105b8020519b702c01/e1af2/pizza2.jpg 750w,\n/js2/static/d0eb9efdef86cf105b8020519b702c01/f6ece/pizza2.jpg 800w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/d0eb9efdef86cf105b8020519b702c01/7f694/pizza2.webp 750w,\n/js2/static/d0eb9efdef86cf105b8020519b702c01/4447d/pizza2.webp 800w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.6675}},"base":"pizza2.jpg"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/js2/static/11b64c3a36326f1301636f365163fa87/487a4/carousel.png","srcSet":"/js2/static/11b64c3a36326f1301636f365163fa87/8d835/carousel.png 750w,\n/js2/static/11b64c3a36326f1301636f365163fa87/9b397/carousel.png 1080w,\n/js2/static/11b64c3a36326f1301636f365163fa87/c1308/carousel.png 1366w,\n/js2/static/11b64c3a36326f1301636f365163fa87/487a4/carousel.png 1599w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/11b64c3a36326f1301636f365163fa87/25f33/carousel.webp 750w,\n/js2/static/11b64c3a36326f1301636f365163fa87/f7d3e/carousel.webp 1080w,\n/js2/static/11b64c3a36326f1301636f365163fa87/cab24/carousel.webp 1366w,\n/js2/static/11b64c3a36326f1301636f365163fa87/e838a/carousel.webp 1599w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.35709818636647905}},"base":"carousel.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#d8d8e8","images":{"fallback":{"src":"/js2/static/b1265c3e6f56ce4944170b2dd149f5c7/87754/pizza.jpg","srcSet":"/js2/static/b1265c3e6f56ce4944170b2dd149f5c7/b3dd7/pizza.jpg 750w,\n/js2/static/b1265c3e6f56ce4944170b2dd149f5c7/870fe/pizza.jpg 1080w,\n/js2/static/b1265c3e6f56ce4944170b2dd149f5c7/f640e/pizza.jpg 1366w,\n/js2/static/b1265c3e6f56ce4944170b2dd149f5c7/87754/pizza.jpg 1920w","sizes":"100vw"},"sources":[{"srcSet":"/js2/static/b1265c3e6f56ce4944170b2dd149f5c7/2daa0/pizza.webp 750w,\n/js2/static/b1265c3e6f56ce4944170b2dd149f5c7/1aa4f/pizza.webp 1080w,\n/js2/static/b1265c3e6f56ce4944170b2dd149f5c7/8647b/pizza.webp 1366w,\n/js2/static/b1265c3e6f56ce4944170b2dd149f5c7/902b5/pizza.webp 1920w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1.5}},"base":"pizza.jpg"}}]}},"pageContext":{"slug":"/modules/8/","frontmatter":{"title":"Module 8 : SPA & sessions & d√©ploiement","description":"Gestion de session utilisateurs pour suivre des op√©rations sur des ressources & d√©ploiement de SPA sur le cloud"}}},"staticQueryHashes":["1696221415","3028011774","3458129946","493526238","501654901","575455071","641954533","758242238"],"slicesMap":{}}