"use strict";(self.webpackChunkmyjscourse=self.webpackChunkmyjscourse||[]).push([[6032],{7031:function(e,n,t){t.r(n),t.d(n,{default:function(){return T}});var r=t(3905),l=t(7294);function a(e){const n=Object.assign({h1:"h1",h2:"h2",p:"p",ul:"ul",li:"li",code:"code",a:"a",strong:"strong",br:"br",pre:"pre",h4:"h4"},(0,r.ah)(),e.components),{PathViewer:t,PathViewerItem:a,InternalPageMenu:s,InternalPageMenuItem:u,InternalPageTitle:c,ScrollableImage:i}=n;return s||o("InternalPageMenu",!0),u||o("InternalPageMenuItem",!0),c||o("InternalPageTitle",!0),t||o("PathViewer",!0),a||o("PathViewerItem",!0),i||o("ScrollableImage",!0),l.createElement(l.Fragment,null,l.createElement(t,null,l.createElement(a,{to:"/"}," web2course "),l.createElement(a,{to:"/part2"}," Partie 2 "),l.createElement(a,{selected:!0}," j) Les SPA, architectures & communications ")),"\n",l.createElement(n.h1,null,"j) Les SPA, architectures & communications"),"\n",l.createElement(s,null,l.createElement(u,null," Architectures classiques d'applications web "),l.createElement(u,null," Caractéristiques et workflow associés à une SPA "),l.createElement(u,null," Architectures associées à une SPA "),l.createElement(u,null," Communications au sein d'une SPA "),l.createElement(u,null," Librairies liées aux requêtes HTTP "),l.createElement(u,null," Requêtes asynchrones & les promesses "),l.createElement(u,null," Exercice 2.11 : Affichage de blagues ")),"\n",l.createElement(n.h1,null,l.createElement(c,null," Architectures classiques d'applications web ")),"\n",l.createElement(n.h2,null,"Introduction"),"\n",l.createElement(n.p,null,"Il existe quelques architectures classiques d'applications web frontend / backend :"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"Les Multi Page Applications (MPA) : le serveur est responsable de générer l'HTML et de le renvoyer aux clients ;"),"\n",l.createElement(n.li,null,"Les Single Page Applications (SPA) : le serveur met à disposition des opérations sur des données aux clients via des web services ; les clients sont principalement responsables de générer l'HTML. Les web services peuvent prendre plusieurs formes :","\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"RESTful API"),"\n",l.createElement(n.li,null,"GraphQL"),"\n",l.createElement(n.li,null,"WebSocket"),"\n",l.createElement(n.li,null,"..."),"\n"),"\n"),"\n",l.createElement(n.li,null,"..."),"\n"),"\n",l.createElement(n.h2,null,"Multi Page Applications"),"\n",l.createElement(n.p,null,"Voici une représentation d'une MPA tel que vous l'avez potentiellement déjà implémentée :"),"\n",l.createElement(i,{name:"mpa.png",minWidth:"400px",maxWidth:"600px"}),"\n",l.createElement("figcaption",null,"MPA communiquant avec un web service"),"\n",l.createElement(n.p,null,"A chaque demande d'une page par un client correspond généralement une requête HTTP de type ",l.createElement(n.code,null,"GET")," faite par un browser :"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"le client est mis en attente jusqu'à ce qu'il reçoive la page HTML correspondant à sa requête ;"),"\n",l.createElement(n.li,null,"le browser affiche l'HTML reçu par le serveur."),"\n"),"\n",l.createElement(n.p,null,"Il existe d'autres types d'architectures associées à des MPA, comme par exemple :"),"\n",l.createElement(i,{name:"mpa-api.png",minWidth:"600px",maxWidth:"800px"}),"\n",l.createElement("figcaption",null,"MPA communiquant avec un web service"),"\n",l.createElement(n.p,null,"Dans cet exemple, le serveur, pour pouvoir générer de l'HTML, va devoir utiliser des opérations mises à disposition par un web service."),"\n",l.createElement(n.p,null,"Les MPA ne seront pas vue dans ce cours."),"\n",l.createElement(n.h2,null,"Single Page Applications"),"\n",l.createElement(n.p,null,"Voici une représentation d'une SPA :"),"\n",l.createElement(i,{name:"spa.png",minWidth:"600px",maxWidth:"800px"}),"\n",l.createElement("figcaption",null,l.createElement(n.p,null,"SPA communiquant avec un web service")),"\n",l.createElement(n.p,null,"Dans un premier temps, la première requête d'un client est généralement une requête HTTP de type ",l.createElement(n.code,null,"GET")," faite par un browser. L'application web agit comme un serveur de fichiers statiques et va renvoyer le layout HTML de base au browser.\r\nNotons que le browser, une fois le layout HTML de base reçu, va demander à l'application web l'ensemble des fichiers nécessaires au bon fonctionnement de l'application : fichiers JS, CSS, images... On appelle ces fichiers les \"assets\"."),"\n",l.createElement(n.p,null,"A chaque future demande d'un client pour afficher une page, le browser va faire appel de manière asynchrone à des opérations offertes par une web service."),"\n",l.createElement(n.p,null,"Comme cet appel est asynchrone, l'IHM du browser reste disponible pour des interactions avec l'utilisateur. Une fois la réponse reçue du web service, le browser s'occupe de mettre à jour dynamiquement l'HTML du browser."),"\n",l.createElement(n.h2,null,"Autres types d'architectures web"),"\n",l.createElement(n.p,null,"Il existe bien sûr d'autres types d'architectures web que celles présentées ci-dessus."),"\n",l.createElement(n.p,null,"Vous pourrez explorer par vous-même, si vous le souhaitez, et totalement optionnellement, les architectures suivantes :"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"Progressive Web Applications"),"\n",l.createElement(n.li,null,"Hybrid Applications : Cordova, Electron, Ionic…"),"\n",l.createElement(n.li,null,"Microservices"),"\n",l.createElement(n.li,null,"JAMStack ",l.createElement(n.a,{href:"/js2/references/#r6"},"[6.]")),"\n"),"\n",l.createElement(n.p,null,"Faites-nous savoir SVP si une architecture particulière vous intéresse et n'est pas reprise ci-dessus ; )"),"\n",l.createElement(n.h1,null,l.createElement(c,null," Caractéristiques et workflow associés à une SPA ")),"\n",l.createElement(n.p,null,"Une SPA (Single Page Application) offre de belles caractéristiques :"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,l.createElement(n.strong,null,"Pas de rechargement de page pendant l'utilisation")," : en effet, on télécharge une seule fois l'ensemble du frontend (et donc de toutes les pages) ;"),"\n",l.createElement(n.li,null,l.createElement(n.strong,null,"La réécriture dynamique du contenu de la page")," : lorsque l'on navigue d'une page à une autre, on change que les parties de l'IHM qui doivent être mises à jour."),"\n",l.createElement(n.li,null,l.createElement(n.strong,null,"Pas d'interruption de l'expérience de l'utilisateur")," : lorsque l'utilisateur, via ses actions, amène par exemple à un appel à une API, l'IHM reste disponible. Le browser peut réaliser des actions\r\nde manière asynchrone (ou autrement dit, en parallèle) et ne bloque pas l'expérience utilisateur lors de long chargements (à l'exception bien sûr du tout premier accès à l'application nécessitant le chargement complet du frontend)."),"\n"),"\n",l.createElement(n.p,null,"Voici un exemple de workflow associé à la SPA qui gérera le site de la pizzeria, afin d'afficher le menu au sein de l'IHM :"),"\n",l.createElement(i,{name:"readPizzas.png",minWidth:"523px",maxWidth:"523px"}),"\n",l.createElement("figcaption",null,"Exemple de Workflow classique d'une SPA"),"\n",l.createElement(n.p,null,"Une fois la page ",l.createElement(n.strong,null,"index.html")," chargée par le browser, celui-ci va faire des appels multiples au serveur de fichiers statiques afin de télécharger tous les assets nécessaires à l'IHM."),"\n",l.createElement(n.p,null,"Une fois l'IHM chargée, le browser lance en parallèle un appel à la RESTful API pour lire toutes les pizzas, tout en étant à l'écoute d'événements qui pourrait se passer au niveau de l'IHM."),"\n",l.createElement(n.h1,null,l.createElement(c,null," Architectures associées à une SPA ")),"\n",l.createElement(n.p,null,"Il existe différentes architectures associées à une SPA."),"\n",l.createElement(n.p,null,"Dans le cadre de ce cours, nous avons choisi d'avoir une IHM qui soit entièrement indépendante de la RESTful API :"),"\n",l.createElement(i,{name:"independentFrontBackSPA.png",minWidth:"914px",maxWidth:"914px"}),"\n",l.createElement("figcaption",null," Frontend indépendant de l'API "),"\n",l.createElement(n.p,null,"Lors du développement, nous utiliserons donc le boilerplate du cours pour avoir une IHM qui soit entièrement indépendante de l'API. Webpack sera utilisé comme serveur de fichiers statiques lors du développement. Notons qu'il est possible d'utiliser d'autres serveurs lors du développement, comme ",l.createElement(n.strong,null,"Live Server")," de VS Code, ou un package npm comme ",l.createElement(n.strong,null,"serve"),".",l.createElement(n.br),"\n","En production, lorsque nous mettrons l'IHM sur le web, nous devrons nous tourner vers un autre serveur de fichiers statiques."),"\n",l.createElement(n.p,null,"Voici l'architecture de l'API telle que développée dans les modules précédents :"),"\n",l.createElement(i,{name:"architecture.png",minWidth:"859px",maxWidth:"859px"}),"\n",l.createElement("figcaption",null,"RESTful API indépendante du frontend"),"\n",l.createElement(n.p,null,"Nous voyons que ces architectures (frontend & backend) amènent à deux projets bien distincts, un projet pour le frontend, et un autre pour le backend."),"\n",l.createElement(n.p,null,"Pour votre information, il est aussi possible d'avoir une architecture monolithique pour une SPA.",l.createElement(n.br),"\n","Dans ce scénario, la RESTful API s'occupe tant de fournir l'IHM via un serveur de fichiers statiques que d'offrir les opérations sur les ressources via un serveur dynamique."),"\n",l.createElement(n.p,null,"Voici un exemple d'architecture monolithique possible à l'aide de Node.js :"),"\n",l.createElement(i,{name:"monolithicSPA.png",minWidth:"758px",maxWidth:"758px"}),"\n",l.createElement("figcaption",null,"SPA monolithique sous Express : chargement du frontend"),"\n",l.createElement(n.p,null,"Une fois le frontend chargé, le browser pourra faire appel aux API et c'est le ou les router(s) de l'API qui prendront en compte les appels."),"\n",l.createElement(n.p,null,"Nous n'appliquerons pas cette architecture dans le cadre de ce cours. Néanmoins, vous aurez toutes les connaissances pour l'appliquer si vous le souhaitez."),"\n",l.createElement(n.p,null,"Voici en résumé les caractéristiques des deux architectures présentées ci-dessus :"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"SPA dont le frontend est indépendant du backend :","\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"Frontend avec Serveur de fichiers statiques pour déployer l'IHM"),"\n",l.createElement(n.li,null,"2 serveurs : 1 serveur pour le frontend, 1 serveur pour le backend"),"\n",l.createElement(n.li,null,"Ports différents pour le Frontend & le Backend"),"\n"),"\n"),"\n",l.createElement(n.li,null,"SPA monolithique :","\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"RESTful API avec serveur de fichiers statiques pour déployer l'IHM"),"\n",l.createElement(n.li,null,"Même serveur pour déployer le backend & le frontend"),"\n",l.createElement(n.li,null,"Même port pour le frontend & le backend"),"\n"),"\n"),"\n"),"\n",l.createElement(n.p,null,"Pour information, les ports permettent à un même appareil de communiquer sur un réseau en offrant plusieurs services. Chaque service, ou application, communique sur un et un seul port."),"\n",l.createElement(n.h1,null,l.createElement(c,null," Communications au sein d'une SPA ")),"\n",l.createElement(n.h2,null,"Introduction aux protocoles de communications d'une SPA"),"\n",l.createElement(n.p,null,"Quelles protocoles & technique principale allons-nous utiliser pour communiquer au sein d'une SPA ?",l.createElement(n.br),"\n","Il en existe plusieurs. Dans le cadre de ce cours, nous allons simplement voir la technique principale, ",l.createElement(n.strong,null,"AJAX")," (ou ",l.createElement(n.strong,null,"A"),"synchronous ",l.createElement(n.strong,null,"Ja"),"vaScript and ",l.createElement(n.strong,null,"X"),"ML)."),"\n",l.createElement(n.p,null,l.createElement(n.strong,null,"AJAX")," est une combinaison de technologies (HTML/CSS, DOM, JSON ou XML, XMLHttpRequest, JS) pour réaliser une application web asynchrone.",l.createElement(n.br),"\n","C'est-à-dire que le frontend reste disponible aux actions des utilisateurs même lorsqu'il fait des requêtes HTTP asynchrone à des API.\r\nLe transport de données entre le frontend et l'API se faisait autrefois via ",l.createElement(n.strong,null,"XML"),". Actuellement, il se fait via ",l.createElement(n.strong,null,"JSON"),"."),"\n",l.createElement(n.p,null,"Notons que dans le cadre d'architectures MPA \"old school\" (non vues dans le cadre de ce cours), généralement, l'appel aux API se fait pas par le frontend, mais par le backend. Pendant toute la durée de l'appel du frontend au backend,\r\ncelui-ci reste en attente car la demande faite au backend est synchrone : par exemple, lorsqu'un formulaire est envoyé au serveur, l'action du formulaire est de faire l'appel à une nouvelle page au serveur (via la propriété \"action\" du formulaire HTML) ; jusqu'à la réponse du backend, aucune action d'un utilisateur ne sera possible au niveau de l'IHM."),"\n",l.createElement(n.p,null,"Il existe d'autres moyens de communiquer entre applications web. Par exemple, les ",l.createElement(n.strong,null,"websockets")," sont une technologie de communication temps-réel client / serveur et bidirectionnelle.",l.createElement(n.br),"\n","A la fin de ce cours, vous devriez être apte à découvrir cette technologie par vous même si vous le souhaitiez."),"\n",l.createElement(n.p,null,"Avec ",l.createElement(n.strong,null,"AJAX"),", c'est le client qui doit initier la communication. Ca n'est pas le cas pour les ",l.createElement(n.strong,null,"websockets"),", le serveur peut le faire. Ainsi, avec ",l.createElement(n.strong,null,"AJAX"),", le client doit créer une connexion HTTP à chaque requête."),"\n",l.createElement(n.h1,null,l.createElement(c,null," Librairies liées aux requêtes HTTP ")),"\n",l.createElement(n.p,null,"Voici une liste de librairies bien connues pouvant parfois être utilisée tant au niveau d'un browser (frontend) que via Node.js (backend) :"),"\n",l.createElement(i,{name:"ajax.png",minWidth:"569px",maxWidth:"569px"}),"\n",l.createElement("figcaption",null,"Comparaison de librairies AJAX/HTTP [R.60]"),"\n",l.createElement(n.p,null,"Anciennement, il y a environ 20 ans, c'est la librairie ",l.createElement(n.strong,null,"XMLHttpRequest")," qui était utilisée.",l.createElement(n.br),"\n","Puis la librairie ",l.createElement(n.strong,null,"ajax")," avait pris l'ascendant via la méthode ",l.createElement(n.strong,null,"$.ajax()"),"."),"\n",l.createElement(n.p,null,"Le standard actuel pour le Vanilla JS, au niveau des browser, c'est la ",l.createElement(n.strong,null,"Fetch API"),". Dans ce cours, Nous allons utiliser cette API offerte par tous les browsers pour faire des requêtes vers nos API.",l.createElement(n.br),"\n","Notez que si vous souhaitez un jour utiliser une librairie pour vos requêtes HTTP, probablement que la plus utilisée actuellement c'est ",l.createElement(n.strong,null,"axios"),"."),"\n",l.createElement(n.h1,null,l.createElement(c,null," Requêtes asynchrones & les promesses ")),"\n",l.createElement(n.p,null,"La méthode ",l.createElement(n.strong,null,"fetch")," permet de faire des requêtes HTTP d'un browser vers des API."),"\n",l.createElement(n.p,null,"Cette méthode est asynchrone, c'est-à-dire quelle n'est pas bloquante, elle renvoie des promesses de résultats via des objets ",l.createElement(n.strong,null,"Promise"),". Nous allons de manière intuitive découvrir la programmation asynchrone. Nous pourrons voir plus en détails par la suite ce qu'est la programmation asynchrone à l'aide de ",l.createElement(n.strong,null,"promises")," (les promesses)."),"\n",l.createElement(n.p,null,"Si un jour vous avez besoin de plus de documentation sur la méthode ",l.createElement(n.strong,null,"fetch"),", n'hésitez pas à consulter la ",l.createElement(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch"},"documentation MDN")," ",l.createElement(n.a,{href:"/js2/references/#r61"},"[R.61]"),"."),"\n",l.createElement(n.p,null,"Pour la pizzeria, l'IHM que nous avons développé au module 3 s'est terminée avec ce code :\r\n",l.createElement(n.a,{href:"https://github.com/e-vinci/js-demos/tree/main/frontend/frontend-essentials/routing-hmi"},"routing-hmi"),"."),"\n",l.createElement(n.p,null,"Cette IHM était entièrement frontend, le ",l.createElement(n.strong,null,"MENU")," étant hardcodé dans la ",l.createElement(n.strong,null,"HomePage"),".",l.createElement(n.br),"\n","Nous souhaitons maintenant changer cela, l'IHM doit faire une requête ",l.createElement(n.strong,null,"fetch")," à notre RESTful API développée au module 5 :\r\n",l.createElement(n.a,{href:"https://github.com/e-vinci/js-demos/tree/main/backend-restful-api/restful-api-essentials/fat-model"},"fat-model"),"."),"\n",l.createElement(n.p,null,"Nous n'allons donc plus utiliser REST Client mais une fonction offerte par le browser pour faire l'équivalent de cette requête :"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-http"},"### Read all pizzas with File variable\r\nGET {{baseUrl}}/pizzas\n")),"\n",l.createElement(n.p,null,"Veuillez démarrer la RESTful API de la pizzeria. En cas de souci, vous pouvez utiliser ce code-ci :\r\n",l.createElement(n.a,{href:"https://github.com/e-vinci/js-demos/tree/main/backend-restful-api/restful-api-essentials/fat-model"},"fat-model"),"."),"\n",l.createElement(n.p,null,"Nous allons maintenant continuer le développement de l'IHM ",l.createElement(n.a,{href:"https://github.com/e-vinci/js-demos/tree/main/frontend/frontend-essentials/routing-hmi"},"routing-hmi"),"."),"\n",l.createElement(n.p,null,"Au sein de votre repo ",l.createElement(n.strong,null,"web2"),", veuillez créer le projet nommé ",l.createElement(n.strong,null,"/web2/tutorials/pizzeria/hmi/basic-fetch")," sur base d'un copié collé de ",l.createElement(n.strong,null,"/web2/tutorials/pizzeria/hmi/structured")," (ou ",l.createElement(n.a,{href:"https://github.com/e-vinci/js-demos/tree/main/frontend/frontend-essentials/routing-hmi"},"routing-hmi"),")."),"\n",l.createElement(n.p,null,"Pour la suite du tutoriel, nous considérons que tous les chemins absolus démarrent du répertoire\r\n",l.createElement(n.strong,null,"/web2/tutorials/pizzeria/hmi/basic-fetch"),"."),"\n",l.createElement(n.p,null,"Veuillez mettre à jour le fichier ",l.createElement(n.strong,null,"src/Components/Pages/HomePage.js")," en supprimant l'array ",l.createElement(n.strong,null,"MENU")," et en remplaçant la ligne ",l.createElement(n.strong,null,l.createElement(n.code,null,"renderMenuFromString(pizzas);"))," par cette requête ",l.createElement(n.strong,null,"fetch")," pour lire toutes les pizzas :"),"\n",l.createElement(n.pre,{numbered:!0,highlighting:"4-14"},l.createElement(n.code,{className:"language-js"},"const HomePage = () => {\r\n  clearPage();\r\n\r\n  fetch('http://localhost:3000/pizzas')\r\n    .then((response) => {\r\n      if (!response.ok) throw new Error(`fetch error : ${response.status} : ${response.statusText}`);\r\n      return response.json();\r\n    })\r\n    .then((pizzas) => {\r\n      renderMenuFromString(pizzas);\r\n    })\r\n    .catch((err) => {\r\n      console.error('HomePage::error: ', err);\r\n    });\r\n\r\n  attachOnMouseEventsToGoGreen();\r\n\r\n  renderDrinksFromNodes(DRINKS);\r\n};\n")),"\n",l.createElement(n.p,null,"Veuillez exécuter le frontend.",l.createElement(n.br),"\n","Ca ne fonctionne pas, nous obtenons ces erreurs dans la console du browser :"),"\n",l.createElement(i,{name:"errors.png",minWidth:"589px",maxWidth:"589px"}),"\n",l.createElement(n.p,null,"La première erreur est très intéressante pour comprendre la nature asynchrone de la fonction\r\n",l.createElement(n.strong,null,"fetch"),"."),"\n",l.createElement(n.p,null,"Par défaut, la fonction ",l.createElement(n.strong,null,"fetch")," fait une requête de type ",l.createElement(n.strong,null,"GET"),".",l.createElement(n.br),"\n","Ici on a donc demandé à la RESTful API, qui tourne sur le port ",l.createElement(n.strong,null,"8080"),' de notre machine locale, la lecture (requête GET) de toutes les ressources de type "pizzas" :'),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},"  fetch('http://localhost:3000/pizzas')\r\n};\n")),"\n",l.createElement(n.p,null,"Comme la fonction ",l.createElement(n.strong,null,"fetch")," est asynchrone, le programme principal ne se bloque pas et n'attend\r\ndonc pas les résultats de l'appel de ",l.createElement(n.strong,null,"fetch"),". Directement après le début du ",l.createElement(n.strong,null,"fetch"),", on passe à la ligne 16 du morceau de code précédent : ",l.createElement(n.strong,null,l.createElement(n.code,null,"attachOnMouseEventsToGoGreen(pizzas);")),".",l.createElement(n.br),"\n","Dans cette fonction, voici ce qui est fait :"),"\n",l.createElement(n.pre,{numbered:!0,highlighting:"2-3"},l.createElement(n.code,{className:"language-js"},"function attachOnMouseEventsToGoGreen() {\r\n  const table = document.querySelector('table');\r\n  table.addEventListener('mouseover', () => {\r\n    table.className = 'table table-success';\r\n  });\r\n\r\n  table.addEventListener('mouseout', () => {\r\n    table.className = 'table table-danger';\r\n  });\r\n}\n")),"\n",l.createElement(n.p,null,"On essaie d'accéder à la table HTML qui doit être créée par la méthode ",l.createElement(n.strong,null,l.createElement(n.code,null,"renderMenuFromString()"))," qui n'a pas encore été appelée...",l.createElement(n.br),"\n","💭 Mais pourquoi la table n'a pas été créée alors que le morceau de code ",l.createElement(n.strong,null,l.createElement(n.code,null,"attachOnMouseEventsToGoGreen(pizzas);"))," se trouve plus haut ?",l.createElement(n.br),"\n","Hé bien c'est ça la programmation asynchrone, ce n'est qu'une fois le programme principal exécuté que les tâches asynchrones, de priorité plus basses, pourront s'exécuter."),"\n",l.createElement(n.p,null,"Comment réecrire ce code pour chaîner l'appel de ",l.createElement(n.strong,null,l.createElement(n.code,null,"attachOnMouseEventsToGoGreen(pizzas)")),"\r\nau succès de l'opération ",l.createElement(n.strong,null,"fetch")," ?"),"\n",l.createElement(n.p,null,"La méthode ",l.createElement(n.strong,null,"fetch")," renvoie une ",l.createElement(n.strong,null,"Promise"),", qui est un objet représentant un état intermédiaire d'une opération. Le code des callbacks s'exécute quand la tâche asynchrone est finie avec succès ou si la tâche échoue."),"\n",l.createElement(n.p,null,"Les états d'une promesse sont les suivants :"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,l.createElement(n.strong,null,"pending")," : état initial,"),"\n",l.createElement(n.li,null,l.createElement(n.strong,null,"fulfilled")," : l'opération asynchrone a été terminée avec succès ; par exemple la requête\r\n",l.createElement(n.strong,null,"fetch()")," a obtenu un flux de données avec la RESTful API,"),"\n",l.createElement(n.li,null,l.createElement(n.strong,null,"rejected")," : l'opération asynchrone a échouée ; par exemple la requête ",l.createElement(n.strong,null,"fetch")," est mal construite."),"\n"),"\n",l.createElement(n.p,null,"Pour récupérer le résultat d'une méthode asynchrone, on va faire appel :"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,l.createElement(n.strong,null,".then( callback )")," : ce morceau de code permet de chaîner des traitements asynchrones. Par exemple, à la fin du premier traitement asynchrone associé au ",l.createElement(n.strong,null,"fetch()"),", on appelle"),"\n"),"\n",l.createElement(n.pre,{numbered:!0,highlighting:"2-5"},l.createElement(n.code,{className:"language-js"},"fetch('http://localhost:3000/pizzas')\r\n  .then((response) => {\r\n    if (!response.ok) throw new Error(`fetch error : ${response.status} : ${response.statusText}`);\r\n    return response.json();\r\n  })\r\n  .then((pizzas) => {\r\n    renderMenuFromString(pizzas);\r\n  })\r\n  .catch((err) => {\r\n    console.error('HomePage::error: ', err);\r\n  });\r\n};\n")),"\n",l.createElement(n.p,null,"La callback sera appelée et recevra comme paramètre un objet de type ",l.createElement(n.strong,null,"Response"),", un objet ne contenant pas encore le contenu du body de la réponse sous forme d'un objet JS. En fait, ",l.createElement(n.strong,null,"Response.body")," est un flux de données (un stream), il faudra donc faire appel à un traitement asynchrone pour obtenir le contenu du body sous forme d'un objet JS.",l.createElement(n.br),"\n","C'est ce qui est fait en renvoyant ",l.createElement(n.strong,null,l.createElement(n.code,null,"return response.json();"))," : la fonction ",l.createElement(n.strong,null,"json()")," renvoie une promesse, c'est à dire qu'une fois le traitement terminé, nous pourrons chaîner celui-ci via un autre ",l.createElement(n.strong,null,".then()"),".\r\nC'est ainsi que nous chaînons, une fois le ",l.createElement(n.strong,null,"body")," (au format JSON) disponible, l'appel d'une deuxième callback qui s'occupe de faire un render du menu de la pizzeria. Cette deuxième callback recevra en paramètre le body de la réponse sous forme d'un objet JS :"),"\n",l.createElement(n.pre,{numbered:!0,highlighting:"6-8"},l.createElement(n.code,{className:"language-js"},"fetch('http://localhost:3000/pizzas')\r\n  .then((response) => {\r\n    if (!response.ok) throw new Error(`fetch error : ${response.status} : ${response.statusText}`);\r\n    return response.json();\r\n  })\r\n  .then((pizzas) => {\r\n    renderMenuFromString(pizzas);\r\n  })\r\n  .catch((err) => {\r\n    console.error('HomePage::error: ', err);\r\n  });\r\n};\n")),"\n",l.createElement(n.p,null,"Si nous souhaitons chaîner l'ajout des écouteurs d'événements sur la table HTML, puis l'affichage des boissons, c'est donc dans cette callback qu'il faut le faire. Veuillez mettre à jour le code afin d'éliminer la première erreur qu'il y avait dans la console :"),"\n",l.createElement(n.pre,{numbered:!0,highlighting:"9-13"},l.createElement(n.code,{className:"language-js"},"const HomePage = () => {\r\n  clearPage();\r\n\r\n  fetch('http://localhost:3000/pizzas')\r\n    .then((response) => {\r\n      if (!response.ok) throw new Error(`fetch error : ${response.status} : ${response.statusText}`);\r\n      return response.json();\r\n    })\r\n    .then((pizzas) => {\r\n      renderMenuFromString(pizzas);\r\n      attachOnMouseEventsToGoGreen();\r\n      renderDrinksFromNodes(DRINKS);\r\n    })\r\n    .catch((err) => {\r\n      console.error('HomePage::error: ', err);\r\n    });\r\n};\n")),"\n",l.createElement(n.p,null,"La console de votre browser devrait afficher une erreur en moins."),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,l.createElement(n.strong,null,".catch( callback )")," : ce morceau de code permet d'exécuter une callback lorsque la tâche asynchrone associée à la promesse échoue. Dans le code, on voit que l'on affiche juste un message dans la console :"),"\n"),"\n",l.createElement(n.pre,{numbered:!0,highlighting:"11-13"},l.createElement(n.code,{className:"language-js"},"fetch('http://localhost:3000/pizzas')\r\n  .then((response) => {\r\n    if (!response.ok) throw new Error(`fetch error : ${response.status} : ${response.statusText}`);\r\n    return response.json();\r\n  })\r\n  .then((pizzas) => {\r\n    renderMenuFromString(pizzas);\r\n    attachOnMouseEventsToGoGreen();\r\n    renderDrinksFromNodes(DRINKS);\r\n  })\r\n  .catch((err) => {\r\n    console.error('HomePage::error: ', err);\r\n  });\r\n};\n")),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,l.createElement(n.strong,null,".finally( callback )")," : si l'on souhaite exécuter une callback quelque soit le résultat de la promesse, en cas de succès ou d'échec."),"\n"),"\n",l.createElement(n.p,null,"⚡ Pour le chaînage des traitements via plusieurs callback appelées au sein de ",l.createElement(n.strong,null,".then()"),", cela n'est possible que s'il y a un ",l.createElement(n.strong,null,"return")," dans les callback."),"\n",l.createElement(n.p,null,"En effet, si une callback dans la gestion de promesses retourne :"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,l.createElement(n.strong,null,"Une valeur")," : la promesse retournée par ",l.createElement(n.strong,null,"then")," est résolue avec la valeur."),"\n",l.createElement(n.li,null,l.createElement(n.strong,null,"Pas de valeur")," : la promesse retournée par ",l.createElement(n.strong,null,"then")," est résolue avec ",l.createElement(n.strong,null,"undefined"),"."),"\n",l.createElement(n.li,null,l.createElement(n.strong,null,'Une autre promesse "pending"'),": la promesse retournée par ",l.createElement(n.strong,null,"then")," est résolue/rejetée à la suite de la résolution/rejet de la promesse retournée par la callback."),"\n"),"\n",l.createElement(n.p,null,"Pour info, autrefois, pour la programmation asynchrone en JS, nous utilisions simplement les callbacks, des fonctions que l'on passait en argument d'autres fonctions. Le code pouvait facilement devenir illisible et donc difficilement maintenable."),"\n",l.createElement(n.p,null,"💭 OK, nous avons appris les fondements de la programmation asynchrone moderne en JS...",l.createElement(n.br),"\n","Mais ça ne fonctionne pas, nous n'avons toujours l'erreur associée aux \"CORS policy\".",l.createElement(n.br),"\n","Cette erreur, c'est un mur classique contre lequel tous les programmeurs web se cognent au moins une fois dans leur carrière 😵."),"\n",l.createElement(n.h1,null,l.createElement(c,null," Exercice 2.11 : Affichage de blagues ")),"\n",l.createElement(n.p,null,"Nous souhaitons consommer une API qui nous permette d'afficher des blagues.",l.createElement(n.br),"\n","Nous avons trouvé une restful API qui permet très facilement de générer de manière aléatoire des ",l.createElement(n.strong,null,"jokes")," : ",l.createElement(n.a,{href:"https://v2.jokeapi.dev/"},"JokeAPI"),"."),"\n",l.createElement(n.p,null,"Cette API est très simple d'utilisation. D'ailleurs, la page du site ",l.createElement(n.a,{href:"https://v2.jokeapi.dev/"},"JokeAPI")," vous donne un exemple fonctionnel de comment récupérer des blagues simples dans l'onglet ",l.createElement(n.strong,null,"Try it out here"),". Pour cela, désélectionnez ",l.createElement(n.strong,null,"twopart")," et vous obtenez l'URL pour faire vos requêtes en dessous du formulaire."),"\n",l.createElement(n.p,null,"Dans la ",l.createElement(n.strong,null,"HomePage")," d'une nouvelle application frontend, veuillez afficher une ",l.createElement(n.strong,null,"joke")," après l'avoir récupérée de ",l.createElement(n.strong,null,"JokeAPI"),", en donnant ces 2 informations :"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"la catégorie associée à la ",l.createElement(n.strong,null,"joke")," ;"),"\n",l.createElement(n.li,null,"le texte associé à la ",l.createElement(n.strong,null,"joke"),"."),"\n"),"\n",l.createElement(n.p,null,"Le code de votre application web doit se trouver dans votre repository local et votre web repository (normalement appelé ",l.createElement(n.strong,null,"web2"),") dans le répertoire nommé ",l.createElement(n.strong,null,"/exercises/module6/6.1"),"."),"\n",l.createElement(n.h4,null,"🤝 Tips"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"Utilisez le ",l.createElement(n.a,{href:"https://github.com/e-vinci/js-router-boilerplate.git"},"boilerplate du cours avec routeur")," pour ajouter à votre projet ",l.createElement(n.strong,null,"exercises/module6/6.1")," tous les répertoires et fichiers utiles."),"\n"),"\n",l.createElement(n.p,null,"Veuillez faire un ",l.createElement(n.strong,null,"commit"),' de votre code avec le message suivant : "',l.createElement(n.strong,null,"module 6 : exercise 6.1 read from JokeAPI"),'".'))}var s=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?l.createElement(n,e,l.createElement(a,e)):a(e)};function o(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}var u=t(4854),c=t(5583),i=t(5679),m=t(307),p=t(7410),d=t(9523),E=t(8075),h=t(9063),g=t(1631),f=t(5772),b=t(2770),v=t(7008),P=t(9771),q=t(1218),A=(t(5258),t(9394)),x=t(4579),I=t(9416),z=t(9256),S=t(6488),w=t(5175),M=t(6387),k=t(6044);const y={Link:u.Link,Image:i.Z,Section:m.Z,Content:p.Z,Background:d.Z,SectionHeader:E.Z,SectionFooter:h.Z,PageHeader:g.Z,CodeBlock:b.Z,LinkFile:v.Z,ScrollableImage:P.Z,PublicProjectsView:q.Z,AuthenticatedBlock:A.Z,UnAuthenticatedBlock:x.Z,NestedMdxBlock:I.Z,YoutubeImage:z.Z,InternalPageMenu:S.Z,InternalPageMenuItem:w.Z,InternalPageTitle:M.Z,PathViewer:k.k,PathViewerItem:k.F};function j(e){var n,t,a,s,o;let{data:{mdx:u,allImages:i},children:m}=e;return y.PageHeader=(0,f.u)(g.Z,null==u?void 0:u.frontmatter),l.createElement(c.Z,Object.assign({},null!=u&&u.frontmatter?{frontmatter:u.frontmatter}:{},null!=u&&null!==(n=u.frontmatter)&&void 0!==n&&n.navbarExtraStyles?{navbarExtraStyles:u.frontmatter.navbarExtraStyles}:{},null!=u&&null!==(t=u.frontmatter)&&void 0!==t&&t.headerImage?{headerImage:u.frontmatter.headerImage}:{},null!=u&&null!==(a=u.frontmatter)&&void 0!==a&&a.featuredImage?{featuredImage:u.frontmatter.featuredImage}:{},null!=u&&null!==(s=u.frontmatter)&&void 0!==s&&s.title?{pageTitle:u.frontmatter.title}:{},i&&i.length>0?{allImages:i}:{}),l.createElement(r.Zo,{components:y},l.createElement("div",{className:null!=u&&null!==(o=u.frontmatter)&&void 0!==o&&o.autoMargin?"page page--auto-margin":"page"},m)))}function T(e){return l.createElement(j,e,l.createElement(s,e))}}}]);
//# sourceMappingURL=component---src-templates-mdx-pages-js-content-file-path-src-mdx-pages-part-2-spa-architectures-fr-mdx-282d12678066fadff160.js.map