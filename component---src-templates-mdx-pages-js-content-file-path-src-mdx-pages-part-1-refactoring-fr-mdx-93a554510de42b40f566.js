"use strict";(self.webpackChunkmyjscourse=self.webpackChunkmyjscourse||[]).push([[3745],{701:function(e,n,t){t.r(n),t.d(n,{default:function(){return T}});var r=t(3905),a=t(7294);function l(e){const n=Object.assign({h1:"h1",p:"p",a:"a",br:"br",ul:"ul",li:"li",strong:"strong",ol:"ol",pre:"pre",code:"code"},(0,r.ah)(),e.components),{PathViewer:t,PathViewerItem:l,InternalPageMenu:s,InternalPageMenuItem:i,InternalPageTitle:u,ScrollableImage:c}=n;return s||o("InternalPageMenu",!0),i||o("InternalPageMenuItem",!0),u||o("InternalPageTitle",!0),t||o("PathViewer",!0),l||o("PathViewerItem",!0),c||o("ScrollableImage",!0),a.createElement(a.Fragment,null,a.createElement(t,null,a.createElement(l,{to:"/"}," web2course "),a.createElement(l,{to:"/part1"}," Partie 1)"),a.createElement(l,{selected:!0}," e) Refactoring ")),"\n",a.createElement(n.h1,null,"e) Refactoring Ã  l'aide d'un \"fat model\""),"\n",a.createElement(s,null,a.createElement(i,null," Architectures possibles ? "),a.createElement(i,null,' Architecture Express & "fat model" '),a.createElement(i,null," Exercice 1.4 : Refactoring de la RESTfull API pour myMovies ")),"\n",a.createElement(n.h1,null,a.createElement(u,null," Architectures possibles ? ")),"\n",a.createElement(n.p,null,"Si nous reprenons le code actuel du tutoriel de l'API gÃ©rant des pizzas (",a.createElement(n.a,{href:"https://github.com/e-vinci/js-demos/tree/main/backend-restful-api/restful-api-essentials/persistence"},"api-persistence"),"), nous pouvons dÃ©tecter que celui-ci pourrait Ãªtre plus propre."),"\n",a.createElement(n.p,null,"Par exemple, le routeur de \"pizzas\" s'occupe tant de gÃ©rer les requÃªtes des clients que d'accÃ©der directement aux donnÃ©es.",a.createElement(n.br),"\n","GÃ©nÃ©ralement, nous prÃ©fÃ©rons sÃ©parer le code gÃ©rant les accÃ¨s aux donnÃ©es du code gÃ©rant la prÃ©sentation du rÃ©sultat des opÃ©rations."),"\n",a.createElement(n.p,null,"On peut donc se demander comment sÃ©parer le code traitant de sujets diffÃ©rents, oÃ¹ ayant des responsabilitÃ©s fort diffÃ©rentes. Il existe une multitude d'architectures possibles, voici par exemple certains des plus grands noms :"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,a.createElement(n.strong,null,"Architecture MVC (Model View Controller)")," ; au niveau backend, ce genre d'architecture est gÃ©nÃ©ralement trÃ¨s utile quand on fait des MPA (ou Multi-Page Applications) via du Server-Side Rendering. Les ",a.createElement(n.strong,null,"Views")," permettent de gÃ©nÃ©rer le frontend Ã  l'aide d'un moteur de templating ; le ",a.createElement(n.strong,null,"Controller")," s'occupe de traiter les requÃªtes en appelant le ",a.createElement(n.strong,null,"Model")," pour l'accÃ¨s aux opÃ©rations sur les donnÃ©es et en renvoyant les ",a.createElement(n.strong,null,"Views")," adÃ©quates. Pour une API, cette architecture n'est pas la plus adaptÃ©e."),"\n",a.createElement(n.li,null,a.createElement(n.strong,null,'Architecture classique "three-tiers"')," ; au nivau backend, quand on dÃ©veloppe une architecture trois tiers, cela signifie que l'on dÃ©coupe notre API en trois couches :","\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,a.createElement(n.strong,null,"couche de prÃ©sentation")," : cette couche est responsable de prÃ©senter les ressources aux clients et d'interprÃ©ter les reprÃ©sentations des ressources donnÃ©es dans les requÃªtes ;"),"\n",a.createElement(n.li,null,a.createElement(n.strong,null,"couche business")," : cette couche s'occupe de toute la logique de l'API, elle fait l'intermÃ©diaire entre la couche de prÃ©sentation et la couche de donnÃ©es ;"),"\n",a.createElement(n.li,null,a.createElement(n.strong,null,"couche de donnÃ©es")," : cette couche s'occupe des accÃ¨s aux donnÃ©es et permet notamment la persistance des ressources au sein de bases de donnÃ©es.",a.createElement(n.br),"\n","Le modÃ¨le trois tiers est fort intÃ©ressant, mais il demande un peu trop d'Ã©criture de codes sans grande valeur ajoutÃ©e quand nous utilisons le framework Express."),"\n"),"\n"),"\n",a.createElement(n.li,null,"..."),"\n"),"\n",a.createElement(n.p,null,"Finalement, parmi les architectures classiques, il n'y a pas rÃ©ellement une architecture qui colle parfaitement Ã  ce qui est offert par le framework Express, sans devoir Ã©crire du code sans valeur ajoutÃ©e."),"\n",a.createElement(n.p,null,'Ainsi, nous allons simplement crÃ©er notre propre architecture "maison", sur base de ces points :'),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"On souhaite pouvoir facilement remplacer la couche d'accÃ¨s aux donnÃ©es sans changer la reprÃ©sentation des ressources ; en effet, dans un premier temps, nous sauvegarderons des donnÃ©es dans des fichiers JSON. Plus tard, si l'on venait Ã  sauvegarder les donnÃ©es dans un systÃ¨me de gestion de base de donnÃ©es, on ne veut pas devoir mettre Ã  jour le code prenant en compte les requÃªtes des clients et prÃ©sentant la rÃ©ponse Ã  ces requÃªtes ; en gros, on souhaite que le code de nos routers, au sein d'Express, soit indÃ©pendant de l'implÃ©mentation des accÃ¨s aux donnÃ©es."),"\n",a.createElement(n.li,null,"Nous n'avons pas vraiment de contraintes pour l'aspect \"business\" de nos APIs : la logique de l'application peut soit s'associer Ã  la couche de donnÃ©es, soit Ã  la couche prÃ©sentation. NÃ©anmoins, nous allons prÃ©fÃ©rer associer un maximum de la logique de notre application Ã  ce que nous allons appeler un ",a.createElement(n.strong,null,"fat model"),". Le ",a.createElement(n.strong,null,"fat model")," contiendra toutes les opÃ©rations possibles sur les ressources, ainsi que les accÃ¨s aux donnÃ©es."),"\n",a.createElement(n.li,null,"Le ",a.createElement(n.strong,null,"fat model")," peut Ãªtre soit Ã©crit en orientÃ© objet, soit simplement Ãªtre un module fournissant des fonctions. Dans le cadre de ce cours, nous choisissons de prÃ©senter un maximum de programmation fonctionnelle plutÃ´t que de l'orientÃ© objet.",a.createElement(n.br),"\n","NÃ©anmoins, n'hÃ©sitez pas Ã  Ã©crire des classes si cela vous tient Ã  coeur ðŸ˜‰."),"\n"),"\n",a.createElement(n.h1,null,a.createElement(u,null,' Architecture Express & "fat model" ')),"\n",a.createElement(n.p,null,"Voici l'architecture que nous allons appliquer dans nos prochaines API :"),"\n",a.createElement(c,{name:"architecture.png",minWidth:"859px",maxWidth:"859px"}),"\n",a.createElement("figcaption",null,"Architecture recommandÃ©e pour ce cours"),"\n",a.createElement(n.p,null,"Voici quelques explications sur ce diagramme que nous allons appliquer dans le prochain tutoriel :"),"\n",a.createElement(n.ol,null,"\n",a.createElement(n.li,null,"Un client fait la requÃªte Ã  l'API demandant de lire toutes les pizzas."),"\n",a.createElement(n.li,null,'Le router de "pizzas" prend le rÃ´le de "Controller". Il s\'occupe de traiter de la requÃªte et d\'appeler une opÃ©ration du ',a.createElement(n.strong,null,"fat model")," pour accÃ©der aux ressources."),"\n",a.createElement(n.li,null,"Le ",a.createElement(n.strong,null,"fat model")," s'occupe d'accÃ©der aux donnÃ©es, qui se trouvent au sein d'un fichier JSON, et de les lire."),"\n",a.createElement(n.li,null,"Le ",a.createElement(n.strong,null,"fat model"),' retourne des donnÃ©es sous forme d\'un objet JS au router de "pizzas".'),"\n",a.createElement(n.li,null,'Le router de "pizzas" renvoient une reprÃ©sentation JSON de l\'objet JS, un array de pizzas, au client.'),"\n"),"\n",a.createElement(n.p,null,'Nous allons maintenant faire un refactor de notre API de gestion des pizzas en crÃ©ant et utilisant un "fat model".'),"\n",a.createElement(n.p,null,"Au sein de votre repo ",a.createElement(n.strong,null,"web2"),", Ã  l'aide du boilerplate du cours ",a.createElement(n.a,{href:"https://github.com/e-vinci/basic-api-boilerplate"},"basic-api-boilerplate"),", veuillez crÃ©er le projet nommÃ© ",a.createElement(n.strong,null,"/web2/tutorials/pizzeria/api/fat-model"),"."),"\n",a.createElement(n.p,null,"Si vous ne voyez pas comment utiliser le boilerplate, tout est expliquÃ© dans le ",a.createElement(n.strong,null,"README")," associÃ© au repository du boilerplate.",a.createElement(n.br),"\n","N'hÃ©sitez pas Ã  le lire ; )"),"\n",a.createElement(n.p,null,"Pour la suite du tutoriel, nous considÃ©rons que tous les chemins absolus dÃ©marrent du rÃ©pertoire\r\n",a.createElement(n.strong,null,"/web2/tutorials/pizzeria/api/fat-model"),"."),"\n",a.createElement(n.p,null,"Nous allons commencer par crÃ©er le ",a.createElement(n.strong,null,"fat model")," offrant les opÃ©rations sur les pizzas.",a.createElement(n.br),"\n","Veuillez crÃ©er le fichier ",a.createElement(n.strong,null,"/models/pizzas.js"),".",a.createElement(n.br),"\n",'Au sein de ce fichier, veuillez ajouter le code s\'occupant des opÃ©rations sur les ressources de type "pizzas" :'),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-js"},"const path = require('node:path');\r\nconst { parse, serialize } = require('../utils/json');\r\n\r\nconst jsonDbPath = path.join(__dirname, '/../data/pizzas.json');\r\n\r\nconst defaultPizzas = [\r\n  {\r\n    id: 1,\r\n    title: '4 fromages',\r\n    content: 'GruyÃ¨re, SÃ©rac, Appenzel, Gorgonzola, Tomates',\r\n  },\r\n  {\r\n    id: 2,\r\n    title: 'Vegan',\r\n    content: 'Tomates, Courgettes, Oignons, Aubergines, Poivrons',\r\n  },\r\n  {\r\n    id: 3,\r\n    title: 'Vegetarian',\r\n    content: 'Mozarella, Tomates, Oignons, Poivrons, Champignons, Olives',\r\n  },\r\n  {\r\n    id: 4,\r\n    title: 'Alpage',\r\n    content: 'GruyÃ¨re, Mozarella, Lardons, Tomates',\r\n  },\r\n  {\r\n    id: 5,\r\n    title: 'Diable',\r\n    content: 'Tomates, Mozarella, Chorizo piquant, Jalapenos',\r\n  },\r\n];\r\n\r\nfunction readAllPizzas(orderBy) {\r\n  const orderByTitle = orderBy?.includes('title') ? orderBy : undefined;\r\n  let orderedMenu;\r\n  const pizzas = parse(jsonDbPath, defaultPizzas);\r\n  if (orderByTitle)\r\n    orderedMenu = [...pizzas].sort((a, b) => a.title.localeCompare(b.title));\r\n  if (orderByTitle === '-title') orderedMenu = orderedMenu.reverse();\r\n\r\n  const allPizzasPotentiallyOrderd = orderedMenu ?? pizzas;\r\n  return allPizzasPotentiallyOrderd;\r\n}\r\n\r\nfunction readOnePizza(id) {\r\n  const idNumber = parseInt(id, 10);\r\n  const pizzas = parse(jsonDbPath, defaultPizzas);\r\n  const indexOfPizzaFound = pizzas.findIndex((pizza) => pizza.id === idNumber);\r\n  if (indexOfPizzaFound < 0) return undefined;\r\n\r\n  return pizzas[indexOfPizzaFound];\r\n}\r\n\r\nfunction createOnePizza(title, content) {\r\n  const pizzas = parse(jsonDbPath, defaultPizzas);\r\n\r\n  const createdPizza = {\r\n    id: getNextId(),\r\n    title,\r\n    content,\r\n  };\r\n\r\n  pizzas.push(createdPizza);\r\n\r\n  serialize(jsonDbPath, pizzas);\r\n\r\n  return createdPizza;\r\n}\r\n\r\nfunction getNextId() {\r\n  const pizzas = parse(jsonDbPath, defaultPizzas);\r\n  const lastItemIndex = pizzas?.length !== 0 ? pizzas.length - 1 : undefined;\r\n  if (lastItemIndex === undefined) return 1;\r\n  const lastId = pizzas[lastItemIndex]?.id;\r\n  const nextId = lastId + 1;\r\n  return nextId;\r\n}\r\n\r\nfunction deleteOnePizza(id) {\r\n  const idNumber = parseInt(id, 10);\r\n  const pizzas = parse(jsonDbPath, defaultPizzas);\r\n  const foundIndex = pizzas.findIndex((pizza) => pizza.id === idNumber);\r\n  if (foundIndex < 0) return undefined;\r\n  const deletedPizzas = pizzas.splice(foundIndex, 1);\r\n  const deletedPizza = deletedPizzas[0];\r\n  serialize(jsonDbPath, pizzas);\r\n\r\n  return deletedPizza;\r\n}\r\n\r\nfunction updateOnePizza(id, propertiesToUpdate) {\r\n  const idNumber = parseInt(id, 10);\r\n  const pizzas = parse(jsonDbPath, defaultPizzas);\r\n  const foundIndex = pizzas.findIndex((pizza) => pizza.id === idNumber);\r\n  if (foundIndex < 0) return undefined;\r\n\r\n  const updatedPizza = { ...pizzas[foundIndex], ...propertiesToUpdate };\r\n\r\n  pizzas[foundIndex] = updatedPizza;\r\n\r\n  serialize(jsonDbPath, pizzas);\r\n\r\n  return updatedPizza;\r\n}\r\n\r\nmodule.exports = {\r\n  readAllPizzas,\r\n  readOnePizza,\r\n  createOnePizza,\r\n  deleteOnePizza,\r\n  updateOnePizza,\r\n};\n")),"\n",a.createElement(n.p,null,"Maintenant, il ne reste plus qu'Ã  mettre Ã  jour le router ",a.createElement(n.strong,null,"/routes/pizzas.js")," afin de faire les appels aux fonctions offertes par le modÃ¨le :"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-js"},"const express = require('express');\r\nconst {\r\n  readAllPizzas,\r\n  readOnePizza,\r\n  createOnePizza,\r\n  deleteOnePizza,\r\n  updateOnePizza,\r\n} = require('../models/pizzas');\r\n\r\nconst router = express.Router();\r\n\r\n/* Read all the pizzas from the menu\r\n   GET /pizzas?order=title : ascending order by title\r\n   GET /pizzas?order=-title : descending order by title\r\n*/\r\nrouter.get('/', (req, res) => {\r\n  const allPizzasPotentiallyOrdered = readAllPizzas(req?.query?.order);\r\n\r\n  return res.json(allPizzasPotentiallyOrdered);\r\n});\r\n\r\n// Read the pizza identified by an id in the menu\r\nrouter.get('/:id', (req, res) => {\r\n  const foundPizza = readOnePizza(req.params.id);\r\n\r\n  if (!foundPizza) return res.sendStatus(404);\r\n\r\n  return res.json(foundPizza);\r\n});\r\n\r\n// Create a pizza to be added to the menu.\r\nrouter.post('/', (req, res) => {\r\n  const title = req?.body?.title?.length !== 0 ? req.body.title : undefined;\r\n  const content =\r\n    req?.body?.content?.length !== 0 ? req.body.content : undefined;\r\n\r\n  if (!title || !content) return res.sendStatus(400); // error code '400 Bad request'\r\n\r\n  const createdPizza = createOnePizza(title, content);\r\n\r\n  return res.json(createdPizza);\r\n});\r\n\r\n// Delete a pizza from the menu based on its id\r\nrouter.delete('/:id', (req, res) => {\r\n  const deletedPizza = deleteOnePizza(req.params.id);\r\n\r\n  if (!deletedPizza) return res.sendStatus(404);\r\n\r\n  return res.json(deletedPizza);\r\n});\r\n\r\n// Update a pizza based on its id and new values for its parameters\r\nrouter.patch('/:id', (req, res) => {\r\n  const title = req?.body?.title;\r\n  const content = req?.body?.content;\r\n\r\n  if ((!title && !content) || title?.length === 0 || content?.length === 0) {\r\n    return res.sendStatus(400);\r\n  }\r\n\r\n  const updatedPizza = updateOnePizza(req.params.id, { title, content });\r\n\r\n  if (!updatedPizza) return res.sendStatus(404);\r\n\r\n  return res.json(updatedPizza);\r\n});\r\n\r\nmodule.exports = router;\n")),"\n",a.createElement(n.p,null,"Lancer votre API soit via le debugger, soit via la commande ",a.createElement(n.strong,null,a.createElement(n.code,null,"npm run dev")),".",a.createElement(n.br),"\n","Veuillez ensuite tester que tout fonctionne bien en exÃ©cutant les requÃªtes HTTP dÃ©jÃ  prÃ©sentes dans le rÃ©pertoire ",a.createElement(n.strong,null,"REST Client")," du boilerplate."),"\n",a.createElement(n.p,null,"Si tout fonctionne bien, faites un ",a.createElement(n.strong,null,"commit")," de votre repo (",a.createElement(n.strong,null,"web2"),') avec le message "',a.createElement(n.strong,null,"fat-model"),'".'),"\n",a.createElement(n.p,null,"En cas de souci, vous pouvez accÃ©der au code du tutoriel ici :\r\n",a.createElement(n.a,{href:"https://github.com/e-vinci/js-demos/tree/main/backend-restful-api/restful-api-essentials/fat-model"},"fat-model"),"."),"\n",a.createElement(n.h1,null,a.createElement(u,null," Exercice 1.4 : Refactoring de la RESTfull API pour myMovies ")),"\n",a.createElement(n.p,null,"Vous allez faire un nouveau refactor de la RESTful API de ",a.createElement(n.strong,null,"myMovies"),", afin de restructurer l'architecture de l'application selon l'architecture recommandÃ©e, en utilisant un \"fat model\" pour gÃ©rer les opÃ©rations sur les films."),"\n",a.createElement(n.p,null,"Afin de rÃ©aliser cet exercice, voici les contraintes d'implÃ©mentation :"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"Veuillez crÃ©er un nouveau projet dans votre repository local et votre web repository (normalement appelÃ© ",a.createElement(n.strong,null,"web2"),") nommÃ© ",a.createElement(n.strong,null,"/exercises/module5/5.2")," sur base d'une copie de votre Exercice 5.1 ou sur base du boilerplate : ",a.createElement(n.a,{href:"https://github.com/e-vinci/basic-api-boilerplate"},"basic-api-boilerplate"),"."),"\n",a.createElement(n.li,null,"Faites un refactor de votre API gÃ©rant les films afin que tout ce qui traite des opÃ©rations sur les ressources soit fait au sein du modÃ¨le ",a.createElement(n.strong,null,"/models/films.json")," ou ",a.createElement(n.strong,null,"/models/movies.json"),"."),"\n",a.createElement(n.li,null,"Veuillez tester toutes les fonctions de la RESTful API pour la collection de films Ã  l'aide du REST Client en copiant les requÃªtes dÃ©veloppÃ©es pour l'Exercice 4.1 (fichier ",a.createElement(n.strong,null,"films.http")," du rÃ©pertoire ",a.createElement(n.strong,null,"REST Client"),"). Normalement, il n'y a pas de nouvelles requÃªtes Ã  Ã©crire, il suffit juste de les exÃ©cuter."),"\n"),"\n",a.createElement(n.p,null,"Le code de votre application web doit donc se trouver dans votre repository local et votre web repository (normalement appelÃ© ",a.createElement(n.strong,null,"web2"),") dans le rÃ©pertoire nommÃ© ",a.createElement(n.strong,null,"/exercises/module5/5.2"),"."),"\n",a.createElement(n.p,null,"Veuillez faire un ",a.createElement(n.strong,null,"commit"),' de votre code avec le message suivant : "',a.createElement(n.strong,null,"myMovies : module 5 : API with fat-model"),'".'))}var s=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?a.createElement(n,e,a.createElement(l,e)):l(e)};function o(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}var i=t(4854),u=t(1263),c=t(5679),d=t(307),m=t(7410),p=t(9523),z=t(8075),f=t(9063),E=t(1631),g=t(6896),h=t(2770),P=t(7008),b=t(9771),v=t(1218),I=(t(5258),t(9394)),x=t(4579),q=t(9653),j=t(9256),y=t(6488),A=t(5175),O=t(158),S=t(6044);const w={Link:i.Link,Image:c.Z,Section:d.Z,Content:m.Z,Background:p.Z,SectionHeader:z.Z,SectionFooter:f.Z,PageHeader:E.Z,CodeBlock:h.Z,LinkFile:P.Z,ScrollableImage:b.Z,PublicProjectsView:v.Z,AuthenticatedBlock:I.Z,UnAuthenticatedBlock:x.Z,NestedMdxBlock:q.Z,YoutubeImage:j.Z,InternalPageMenu:y.Z,InternalPageMenuItem:A.Z,InternalPageTitle:O.Z,PathViewer:S.k,PathViewerItem:S.F};function M(e){var n,t,l,s,o;let{data:{mdx:i,allImages:c},children:d}=e;return w.PageHeader=(0,g.u)(E.Z,null==i?void 0:i.frontmatter),a.createElement(u.Z,Object.assign({},null!=i&&i.frontmatter?{frontmatter:i.frontmatter}:{},null!=i&&null!==(n=i.frontmatter)&&void 0!==n&&n.navbarExtraStyles?{navbarExtraStyles:i.frontmatter.navbarExtraStyles}:{},null!=i&&null!==(t=i.frontmatter)&&void 0!==t&&t.headerImage?{headerImage:i.frontmatter.headerImage}:{},null!=i&&null!==(l=i.frontmatter)&&void 0!==l&&l.featuredImage?{featuredImage:i.frontmatter.featuredImage}:{},null!=i&&null!==(s=i.frontmatter)&&void 0!==s&&s.title?{pageTitle:i.frontmatter.title}:{},c&&c.length>0?{allImages:c}:{}),a.createElement(r.Zo,{components:w},a.createElement("div",{className:null!=i&&null!==(o=i.frontmatter)&&void 0!==o&&o.autoMargin?"page page--auto-margin":"page"},d)))}function T(e){return a.createElement(M,e,a.createElement(s,e))}}}]);
//# sourceMappingURL=component---src-templates-mdx-pages-js-content-file-path-src-mdx-pages-part-1-refactoring-fr-mdx-93a554510de42b40f566.js.map